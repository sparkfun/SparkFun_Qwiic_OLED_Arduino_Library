{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"api_arduino/","title":"Arduino Print","text":"<p>Methods used to support Arduino Print functionality.</p>"},{"location":"api_arduino/#setcursor","title":"setCursor()","text":"<p>This method is called set the \"cursor\" position in the device. The library supports the Arduino <code>Print</code> interface, enabling the use of a <code>print()</code> and <code>println()</code> methods. The set cursor position defines where to start text output for this functionality.</p> <pre><code>void setCursor(uint8_t x, uint8_t y)\n</code></pre> Parameter Type Description x <code>uint8_t</code> The X coordinate of the cursor y <code>uint8_t</code> The Y coordinate of the cursor"},{"location":"api_arduino/#setcolor","title":"setColor()","text":"<p>This method is called to set the current color of the system. This is used by the Arduino <code>Print</code> interface functionality</p> <pre><code>void setColor(uint8_t clr)\n</code></pre> Parameter Type Description <code>clr</code> <code>uint8_t</code> The color to set. 0 = black, &gt; 0 = white"},{"location":"api_arduino/#getcolor","title":"getColor()","text":"<p>This method is called to get the current color of the system. This is used by the Arduino <code>Print</code> interface functionality</p> <pre><code>uint8_t getColor(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The current color"},{"location":"api_device/","title":"Device Operations","text":"<p>Methods to setup the device, get device information and change display options.</p>"},{"location":"api_device/#initialization","title":"Initialization","text":""},{"location":"api_device/#begin","title":"begin()","text":"<p>This method is called to initialize the OLED library and connection to the OLED device. This method must be called before calling any graphics methods. </p> <pre><code>bool begin(TwoWire &amp;wirePort, uint8_t address)\n</code></pre> Parameter Type Description <code>wirePort</code> <code>TwoWire</code> optional. The Wire port. If not provided, the default port is used <code>address</code> <code>uint8_t</code> optional. I2C Address. If not provided, the default address is used. return value <code>bool</code> <code>true</code> on success, <code>false</code> on startup failure"},{"location":"api_device/#reset","title":"reset()","text":"<p>When called, this method reset the library state and OLED device to their intial state. Helpful to reset the OLED after waking up a system from a sleep state.</p> <pre><code>void reset()\n</code></pre> Parameter Type Description return value <code>bool</code> <code>true</code> on success, <code>false</code> on startup failure"},{"location":"api_device/#geometry","title":"Geometry","text":""},{"location":"api_device/#getwidth","title":"getWidth()","text":"<p>This method returns the width, in pixels, of the connected OLED device</p> <pre><code>uint8_t getWidth(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The width in pixels of the connected OLED device"},{"location":"api_device/#getheight","title":"getHeight()","text":"<p>This method returns the height, in pixels, of the connected OLED device</p> <pre><code>uint8_t getHeight(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The height in pixels of the connected OLED device"},{"location":"api_device/#display-modes","title":"Display Modes","text":""},{"location":"api_device/#invert","title":"invert()","text":"<p>This method inverts the current graphics on the display. This results of this command happen immediatly.</p> <pre><code>void invert(bool bInvert)\n</code></pre> Parameter Type Description <code>bInvert</code> <code>bool</code> <code>true</code> - the screen is inverted. <code>false</code> - the screen is set to normal"},{"location":"api_device/#flipvertical","title":"flipVertical()","text":"<p>When called, the screen contents are flipped vertically if the flip parameter is true, or restored to normal display if the flip parameter is false. </p> <pre><code>void flipVertical(bool bFlip)\n</code></pre> Parameter Type Description <code>bFlip</code> <code>bool</code> <code>true</code> - the screen is flipped vertically. <code>false</code> - the screen is set to normal"},{"location":"api_device/#fliphorizontal","title":"flipHorizontal()","text":"<p>When called, the screen contents are flipped horizontally if the flip parameter is true, or restored to normal display if the flip parameter is false. </p> <pre><code>void flipHorizontal(bool bFlip)\n</code></pre> Parameter Type Description <code>bFlip</code> <code>bool</code> <code>true</code> - the screen is flipped horizontally. <code>false</code> - the screen is set to normal"},{"location":"api_device/#displaypower","title":"displayPower()","text":"<p>Used to turn the OLED display on or off. </p> <pre><code>void displayPower(bool bEnable)\n</code></pre> Parameter Type Description <code>bEnable</code> <code>bool</code> <code>true</code> - the OLED display is powered on (default). <code>false</code> - the OLED dsiplay is powered off."},{"location":"api_draw/","title":"Drawing Settings/State","text":"<p>Methods for setting the drawing state of the library.</p>"},{"location":"api_draw/#setfont","title":"setFont()","text":"<p>This method is called to set the current font in the library. The current font is used when calling the <code>text()</code> method on this device. </p> <p>The default font for the device is <code>5x7</code>.</p> <pre><code>void setFont(QwiicFont&amp; theFont)\nvoid setFont(const QwiicFont * theFont)\n</code></pre> Parameter Type Description <code>theFont</code> <code>QwiicFont</code> The font to set as current in the device <code>theFont</code> <code>QwiicFont*</code> Pointer to the font to set as current in the device. <p>For the library, fonts are added to your program by including them via include files which are part of this library. </p> <p>The following fonts are included:</p> Font Include File Font Variable Description 5x7 <code>&lt;res/qw_fnt_5x7.h&gt;</code> <code>QW_FONT_5X7</code> A full, 5 x 7 font 31x48 <code>&lt;res/qw_fnt_31x48.h&gt;</code> <code>QW_FONT_31X48</code> A full, 31 x 48 font Seven Segment <code>&lt;res/qw_fnt_7segment.h&gt;</code> <code>QW_FONT_7SEGMENT</code> Numbers only 8x16 <code>&lt;res/qw_fnt_8x16.h&gt;</code> <code>QW_FONT_8X16</code> A full, 8 x 16 font Large Numbers <code>&lt;res/qw_fnt_largenum.h&gt;</code> <code>QW_FONT_LARGENUM</code> Numbers only <p>For each font, the font variables are objects with the following attributes:</p> Attribute Value <code>width</code> The font width in pixels <code>height</code> The font height in pixels <code>start</code> The font start character offset <code>n_chars</code> The number of characters <code>map_width</code> The width of the font map <p>Example use of a font object attribute: <pre><code>#include &lt;res/qw_fnt_31x48.h&gt;\n\nint myFontWidth = QW_FONT_31X48.width;\n</code></pre></p>"},{"location":"api_draw/#getfont","title":"getFont()","text":"<p>This method returns the current font for the device.</p> <pre><code>QwiicFont * getFont(void)\n</code></pre> Parameter Type Description return value <code>QwiicFont*</code> A pointer to the current font. See <code>setFont()</code> for font object details."},{"location":"api_draw/#getfontname","title":"getFontName()","text":"<p>This method returns the height in pixels of a provided String based on the current device font.</p> <pre><code>String getFontName(void)\n</code></pre> Parameter Type Description return value String The name of the current font."},{"location":"api_draw/#getstringwidth","title":"getStringWidth()","text":"<p>This method returns the width in pixels of a provided String based on the current device font.</p> <pre><code>unsigned int getStringWidth(String text)\n</code></pre> Parameter Type Description text <code>String</code> The string used to determine width return value <code>unsigned int</code> The width of the provide string, as determined using the current font."},{"location":"api_draw/#getstringheight","title":"getStringHeight()","text":"<p>This method returns the height in pixels of a provided String based on the current device font.</p> <pre><code>unsigned int getStringHeight(String text)\n</code></pre> Parameter Type Description text <code>String</code> The string used to determine height return value <code>unsigned int</code> The height of the provide string, as determined using the current font."},{"location":"api_draw/#setdrawmode","title":"setDrawMode()","text":"<p>This method sets the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. </p> <pre><code>void setDrawMode(grRasterOp_t rop)\n</code></pre> Parameter Type Description rop <code>grRasterOp_t</code> The raster operation (ROP) to set the graphics system to. <p>Raster operations device how source (pixels to draw) are represented on the destination device. The available Raster Operation (ROP) codes are:</p> ROP Code Description grROPCopy default Drawn pixel values are copied to the device screen grROPNotCopy A not operation is applied to the source value before copying to screen grROPNot A not operation is applied to the destination (screen) value grROPXOR A XOR operation is performed between the source and destination values grROPBlack A value of 0, or black is drawn to the destination grROPWhite A value of 1, or black is drawn to the destination"},{"location":"api_draw/#getdrawmode","title":"getDrawMode()","text":"<p>This method returns the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. </p> <pre><code>grRasterOp_t getDrawMode(void)\n</code></pre> Parameter Type Description return value <code>grRasterOp_t</code> The current aster operation (ROP) of the graphics system."},{"location":"api_graphics/","title":"Graphics Methods","text":"<p>Methods used to draw and display graphics.</p>"},{"location":"api_graphics/#display","title":"display()","text":"<p>When called, any pending display updates are sent to the connected OLED device. This includes drawn graphics and erase commands.</p> <pre><code>void display(void)\n</code></pre> Parameter Type Description NONE"},{"location":"api_graphics/#erase","title":"erase()","text":"<p>Erases all graphics on the device, placing the display in a blank state. The erase update isn't sent to the device until the next <code>display()</code> call on the device.</p> <pre><code>void erase(void)\n</code></pre> Parameter Type Description NONE"},{"location":"api_graphics/#pixel","title":"pixel()","text":"<p>Set the value of a pixel on the screen.</p> <pre><code>void pixel(uint8_t x, uint8_t y, uint8_t clr)\n</code></pre> Parameter Type Description x <code>uint8_t</code> The X coordinate of the pixel to set y <code>uint8_t</code> The Y coordinate of the pixel to set clr <code>uint8_t</code> optional The color value to set the pixel. This defaults to white (1)."},{"location":"api_graphics/#line","title":"line()","text":"<p>Draw a line on the screen. </p> <p>Note: If a line is horizontal (y0 = y1) or vertical (x0 = x1), optimized draw algorithms are used by the library.</p> <pre><code>void line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The start X coordinate of the line y0 <code>uint8_t</code> The start Y coordinate of the line x1 <code>uint8_t</code> The end X coordinate of the line y1 <code>uint8_t</code> The end Y coordinate of the line clr <code>uint8_t</code> optional The color value to draw the line. This defaults to white (1)."},{"location":"api_graphics/#rectangle","title":"rectangle()","text":"<p>Draw a rectangle on the screen. </p> <pre><code>void rectangle(uint8_t x0, uint8_t y0, uint8_t width, uint8_t height, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The start X coordinate of the rectangle - upper left corner y0 <code>uint8_t</code> The start Y coordinate of the rectangle - upper left corner width <code>uint8_t</code> The width of the rectangle height <code>uint8_t</code> The height of the rectangle clr <code>uint8_t</code> optional The color value to draw the line. This defaults to white (1)."},{"location":"api_graphics/#rectanglefill","title":"rectangleFill()","text":"<p>Draw a filled rectangle on the screen. </p> <pre><code>void rectangleFill(uint8_t x0, uint8_t y0, uint8_t width, uint8_t height, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The start X coordinate of the rectangle - upper left corner y0 <code>uint8_t</code> The start Y coordinate of the rectangle - upper left corner width <code>uint8_t</code> The width of the rectangle height <code>uint8_t</code> The height of the rectangle clr <code>uint8_t</code> optional The color value to draw the line. This defaults to white (1)."},{"location":"api_graphics/#circle","title":"circle()","text":"<p>Draw a circle on the screen. </p> <pre><code>void circle(uint8_t x0, uint8_t y0, uint8_t radius, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate of the circle center y0 <code>uint8_t</code> The Y coordinate of the circle center radius <code>uint8_t</code> The radius of the circle clr <code>uint8_t</code> optional The color value to draw the circle. This defaults to white (1)."},{"location":"api_graphics/#circlefill","title":"circleFill()","text":"<p>Draw a filled circle on the screen. </p> <pre><code>void circleFill(uint8_t x0, uint8_t y0, uint8_t radius, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate of the circle center y0 <code>uint8_t</code> The Y coordinate of the circle center radius <code>uint8_t</code> The radius of the circle clr <code>uint8_t</code> optional The color value to draw the circle. This defaults to white (1)."},{"location":"api_graphics/#bitmap","title":"bitmap()","text":"<p>Draws a bitmap on the screen.</p> <p>The bitmap should be 8 bit encoded - each pixel contains 8 y values.</p> <pre><code>void bitmap(uint8_t x0, uint8_t y0, uint8_t *pBitmap, uint8_t bmp_width, uint8_t bmp_height )\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to place the bitmap - upper left corner y0 <code>uint8_t</code> The Y coordinate to place the bitmap - upper left corner pBitmap <code>uint8_t *</code> A pointer to the bitmap array bmp_width <code>uint8_t</code> The width of the bitmap bmp_height <code>uint8_t</code> The height of the bitmap"},{"location":"api_graphics/#bitmap_1","title":"bitmap()","text":"<p>Draws a bitmap on the screen.</p> <p>The bitmap should be 8 bit encoded - each pixel contains 8 y values.</p> <p>The coordinate [x1,y1] allows for only a portion of bitmap to be drawn. </p> <pre><code>void bitmap(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, \n                uint8_t *pBitmap, uint8_t bmp_width, uint8_t bmp_height )\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to place the bitmap - upper left corner y0 <code>uint8_t</code> The Y coordinate to place the bitmap - upper left corner x1 <code>uint8_t</code> The end X coordinate of the bitmap - lower right corner y1 <code>uint8_t</code> The end Y coordinate of the bitmap - lower right corner pBitmap <code>uint8_t *</code> A pointer to the bitmap array bmp_width <code>uint8_t</code> The width of the bitmap bmp_height <code>uint8_t</code> The height of the bitmap"},{"location":"api_graphics/#bitmap_2","title":"bitmap()","text":"<p>Draws a bitmap on the screen using a Bitmap object for the bitmap data.</p> <pre><code>void bitmap(uint8_t x0, uint8_t y0, QwiicBitmap&amp; bitmap)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to place the bitmap - upper left corner y0 <code>uint8_t</code> The Y coordinate to place the bitmap - upper left corner Bitmap <code>QwiicBitmap</code> A bitmap object"},{"location":"api_graphics/#text","title":"text()","text":"<p>Draws a string using the current font on the screen.</p> <pre><code>void text(uint8_t x0, uint8_t y0, const char * text, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to start drawing the text y0 <code>uint8_t</code> The Y coordinate to start drawing the text text <code>const char*</code> The string to draw on the screen text <code>String</code> The Arduino string to draw on the screen clr <code>uint8_t</code> optional The color value to draw the circle. This defaults to white (1)."},{"location":"api_scroll/","title":"Scrolling","text":"<p>Methods for device scrolling</p>"},{"location":"api_scroll/#scrollstop","title":"scrollStop()","text":"<p>If the device is in a scrolling mode, calling this method stops the scroll, and restores the device to normal display operation. This action is performed immediately.</p> <pre><code>void scrollStop(void)\n</code></pre> Parameter Type Description NONE"},{"location":"api_scroll/#scrollright","title":"scrollRight()","text":"<p>This method is called to start the device scrolling the displayed graphics to the right. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrollRight(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed below <p>Defined values for the <code>interval</code> parameter:</p> Defined Symbol Time Interval Between Steps <code>SCROLL_INTERVAL_2_FRAMES</code> 2 <code>SCROLL_INTERVAL_3_FRAMES</code> 3 <code>SCROLL_INTERVAL_4_FRAMES</code> 4 <code>SCROLL_INTERVAL_5_FRAMES</code> 5 <code>SCROLL_INTERVAL_25_FRAMES</code> 25 <code>SCROLL_INTERVAL_64_FRAMES</code> 64 <code>SCROLL_INTERVAL_128_FRAMES</code> 128 <code>SCROLL_INTERVAL_256_FRAMES</code> 256"},{"location":"api_scroll/#scrollvertright","title":"scrollVertRight()","text":"<p>This method is called to start the device scrolling the displayed graphics vertically and to the right. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrolVertlRight(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed in <code>scrollRight</code>"},{"location":"api_scroll/#scrollleft","title":"scrollLeft()","text":"<p>This method is called start to the device scrolling the displayed graphics to the left. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrollLeft(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed in <code>scrollRight</code>"},{"location":"api_scroll/#scrollvertleft","title":"scrollVertLeft()","text":"<p>This method is called to start the device scrolling the displayed graphics vertically and to the left. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrolVertlLeft(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed in <code>scrollRight</code>"},{"location":"hug_0p91/","title":"Qwiic OLED (0.91\", 128x32)","text":""},{"location":"hug_0p91/#introduction","title":"Introduction","text":"<p>The SparkFun Qwiic OLED Display can display up to four lines of text and features 128x32 pixels in a small 0.91\u201d (diagonal) frame. As an OLED, this display does not have a back light layer (unlike LCDs) and therefore it\u2019s thinner, consumes less power, and has higher contrast.</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED Display (0.91 in., 128x32)    LCD-24606    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this section, we'll go over the hardware and how to hookup the breakout board.</p>"},{"location":"hug_0p91/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Plus [DEV-18158]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x SparkFun Qwiic OLED Display (0.91 in., 128x32) [LCD-22495]</li> </ul>"},{"location":"hug_0p91/#microcontroller","title":"Microcontroller","text":"<p>To get started, you'll need a microcontroller to, well, control everything. We used the RedBoard with the ATmega328P for the Qwiic micro OLED. However, any of the other microcontrollers that are compatible with the Qwiic OLED Arduino Library will work as well. Below are a few from the list that we provided earlier.</p> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul>"},{"location":"hug_0p91/#usb-cable","title":"USB Cable","text":"<p>Below are a few USB cables from the SparkFun catalog. Make sure to grab the associated USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun 4-in-1 Multi-USB Cable - USB-A Host    CAB-21272 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to Reversible Micro-B Cable - 0.8m    CAB-15428 </p> </li> </ul>"},{"location":"hug_0p91/#qwiic","title":"Qwiic","text":"<p>If the controller you choose doesn't have a built-in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed:</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino    DEV-14352 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Teensy    DEV-17119 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino Nano    DEV-16789 </p> </li> </ul> <p>You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs.</p> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 200mm    PRT-17258 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 500mm    PRT-17257 </p> </li> </ul> <p>Of course, you will also need a Qwiic Micro OLED if you have not added that to you cart already.</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED Display (0.91 in., 128x32)    LCD-24606 </p> </li> </ul> <p></p>"},{"location":"hug_0p91/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Qwiic OLED Display (0.91 in., 128x32).</p> Top View Bottom View"},{"location":"hug_0p91/#oled-display-091-128x32","title":"OLED Display (0.91\", 128x32)","text":"<p>The OLED screen has a pixel resolution of 128x32, a panel size of 30.0mm x 11.5mm x 1.2mm, and an active area of 22.384mm x 5.584mm. The driver chip is the SSD1306. For information can be found in the datasheet linked in the Resources.</p> OLED Highlighted <p>Note</p> <p>The SparkFun Qwiic OLED Arduino Library works for multiple displays. However, there are some caveats in the size of the display with the text. While you can technically display all fonts in the narrow OLED display, some characters (numbers, letters, and/or symbols depending on the font) will be too big to fully display on the screen. For example, the fonts for the 31x48 (i.e. <code>&amp;QW_FONT_31X48</code>) and large numbers (i.e. <code>&amp;QW_FONT_LARGENUM</code>) are too big to fit within the display.</p> <p>Using the OLED display (0.91\", 128x32) we found that we were able to fit:</p> <ul> <li>4x lines, 21x characters using the 5x7 (i.e. <code>&amp;QW_FONT_5X7</code>)</li> <li>2x lines, 14x characters using the 8x16 (i.e. <code>&amp;QW_FONT_8X16</code>)</li> <li>2x lines, 11x characters using the 7 segment (i.e. <code>&amp;QW_FONT_7SEGMENT</code>)</li> </ul>"},{"location":"hug_0p91/#power","title":"Power","text":"<p>Power is applied through the vertical Qwiic connectors on the back of the board. The recommended input voltage is 3.3V. The logic levels for the Qwiic OLED Display (0.9\", 128x32) is 3.3V.</p> Power"},{"location":"hug_0p91/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two vertical Qwiic connectors populated on the back of the board. You can use either connectors to provide power and send data through I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SCL \u2014 I<sup>2</sup>C clock</li> <li>SDA \u2014 I<sup>2</sup>C data</li> <li>3.3V \u2014 Power</li> <li>GND \u2014 Ground</li> </ul> Vertical Qwiic Connectors <p>The address of the display is 0x3C.</p> <p>Note</p> <p>On the back of the board, the power and I<sup>2</sup>C pins are broken out to test points. These are used in our production department for quality control using custom testbeds. These could be an alternative option to connect to the pins. However, we recommend using the Qwiic connectors to easily connect to the OLED display. Note that the I<sup>2</sup>C pins are also in a different order compared to a standard I<sup>2</sup>C Qwiic connector should you decide to solder to the test points.</p> <p> I2C Test Points </p>"},{"location":"hug_0p91/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The board includes a 1x3 jumper on the back of the board.</p> <ul> <li>I2C \u2014 This three way jumper labeled I2C is connected to two 4.7k\u03a9 pull-up resistors to the I<sup>2</sup>C data and clock lines. For users that have multiple Qwiic-enabled devices with pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> </ul> Jumpers Highlighted"},{"location":"hug_0p91/#board-dimensions","title":"Board Dimensions","text":"<p>Version 1.1 is a bit smaller than previous versions since the board includes vertical Qwiic connectors on the back of the board. The overall board size is 1.75 in x 0.5 in. The mounting holes have also moved to toward the top of the board.</p> Board Dimensions"},{"location":"hug_0p91/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect to the display. We will go just a bit further and talk about how to mount the display.</p>"},{"location":"hug_0p91/#connecting-via-qwiic-connector","title":"Connecting via Qwiic Connector","text":"<p>Insert a Qwiic cable between your chosen microcontroller and Qwiic OLED. Then insert a USB cable between the microcontroller and your computer's COM port. For the scope of this tutorial, the USB cable provides power and allows us to upload code to the microcontroller. Of course, you can also debug the display by opening a Serial Terminal.</p> USB Cable, RedBoard Plus (ATMega328P), Qwiic Cable, Qwiic OLED (0.9 in., 12x32) <p>Once you have finished prototyping, you could continue to use the USB cable and add a 5V power supply or battery pack.</p>"},{"location":"hug_0p91/#mounting-the-qwiic-oled-09-128x32","title":"Mounting the Qwiic OLED (0.9\", 128x32)","text":"<p>Grab the board dimensions and cut out a rectangle in the enclosure. For users that want to mount the board so that the OLED display is flush against the enclosure, you will need to look at the dimensions based on the OLED. You will need to add a little tolerance so that the display can fit through the rectangle. For users that need to quickly mount the board, you will could also cut out rectangles based on the vertical Qwiic connector so that the wires can lead into the enclosure. Then cut out the mounting holes so that the board is right side up. In this case, we used a cardboard box as a quick example to demonstrate the Qwiic wires connecting leading into the enclosure.</p> Qwiic OLED Display Mounted in an Enclosure <p>Note</p> <p>To easily display text and graphics on the board, we recommend mounting the board right side up. There is an option in the example code to flip the text horizontally and vertically should you decide to mount the board upside down, but you would need to also determine the position of the text.</p> <p>For a more durable enclosure, you could use wood, metal, or plastic. However, you will need additional tools to cut into the material.</p>"},{"location":"hug_0p91/#software","title":"Software","text":"<p>The Qwiic OLED (0.91\", 128x32) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED Library's Software Setup has instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide.</p> SparkFun Qwiic OLED Library API Reference Guide"},{"location":"hug_0p91/#resources","title":"Resources","text":"<p>Now that you've successfully got your OLED Display (0.9\", 128x36) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet (PDF) (0.91\", 128x32, SSD1306)</li> <li>ReadtheDocs: Qwiic_OLED_Display_Py</li> <li>Qwiic OLED Display Python Package Repo</li> <li>Github Hardware Repo</li> </ul>"},{"location":"hug_1p3/","title":"Qwiic OLED (1.3\", 128x64)","text":"<p>The Qwiic OLED 1.3in has its own hook-up guide.</p>"},{"location":"hug_micro_view/","title":"Qwiic Micro OLED (0.66\", 64x48)","text":""},{"location":"hug_micro_view/#introduction","title":"Introduction","text":"<p>The Qwiic Micro OLED is a Qwiic enabled version of our micro OLED display! This small monochrome, blue-on-black OLED display displays incredibly clear images.</p> <p> <ul> <li> <p> </p> <p> SparkFun Micro OLED Breakout (Qwiic)    LCD-22495    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>This hookup guide will show you how to get started drawing objects and characters on your OLED.</p>"},{"location":"hug_micro_view/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Plus [DEV-18158]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x SparkFun Micro OLED Breakout (Qwiic) [LCD-22495]</li> </ul>"},{"location":"hug_micro_view/#microcontroller","title":"Microcontroller","text":"<p>To get started, you'll need a microcontroller to, well, control everything. We used the RedBoard with the ATmega328P for the Qwiic micro OLED. However, any of the other microcontrollers that are compatible with the Qwiic OLED Arduino Library will work as well. Below are a few from the list that we provided earlier.</p> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul>"},{"location":"hug_micro_view/#usb-cable","title":"USB Cable","text":"<p>Below are a few USB cables from the SparkFun catalog. Make sure to grab the associated USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun 4-in-1 Multi-USB Cable - USB-A Host    CAB-21272 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to Reversible Micro-B Cable - 0.8m    CAB-15428 </p> </li> </ul>"},{"location":"hug_micro_view/#qwiic","title":"Qwiic","text":"<p>If the controller you choose doesn't have a built-in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed:</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino    DEV-14352 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Teensy    DEV-17119 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino Nano    DEV-16789 </p> </li> </ul> <p>You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs.</p> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 200mm    PRT-17258 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 500mm    PRT-17257 </p> </li> </ul> <p>Of course, you will also need a Qwiic Micro OLED if you have not added that to you cart already.</p> <p> <ul> <li> <p> </p> <p> SparkFun Micro OLED Breakout (Qwiic)    LCD-22495 </p> </li> </ul> <p></p>"},{"location":"hug_micro_view/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>We would also recommend taking a look at the following tutorials if you aren't familiar with them.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> </ul>"},{"location":"hug_micro_view/#hardware-overview","title":"Hardware Overview","text":"<p>Listed below are some of the operating ranges and characteristics of the Qwiic Micro OLED.</p> Characteristic              Range              Voltage 3.3V Temperature -40\u00b0C to 85\u00b0C I<sup>2</sup>C Address 0X3D (Default) or 0X3C (Closed Jumper)"},{"location":"hug_micro_view/#pins","title":"Pins","text":"<p>Power and I<sup>2</sup>C pins are broken out to the 1x4 PTH pins as well as the two horizontal Qwiic connectors.</p> Pin              Description              Direction              GND Ground In 3.3V Power In SDA I<sup>2</sup>C Data In SCL I<sup>2</sup>C Clock In"},{"location":"hug_micro_view/#jumpers","title":"Jumpers","text":"<p>There are several jumpers on board that can be changed to facilitate several different functions. The first of which is the I<sup>2</sup>C pull-up jumper to disable the 2.2k\u03a9 pull up resistors on the I<sup>2</sup>C data and clock lines, highlighted below. If multiple boards are connected to the I<sup>2</sup>C bus, the equivalent resistance goes down, increasing your pull up strength. If multiple boards are connected on the same bus, make sure only one board has the pull-up resistors connected.</p> I2C Pull-Up Jumper <p>The ADDR jumper (highlighted below) can be used to change the I<sup>2</sup>C address of the board. The default jumper is open by default, pulling the address pin high and giving us an I<sup>2</sup>C address of 0X3D. Closing this jumper will ground the address pin, giving us an I<sup>2</sup>C address of 0X3C.</p> Address Jumper"},{"location":"hug_micro_view/#board-dimensions","title":"Board Dimensions","text":"<p>Revision Change</p> <p>For V11, we have optimized the two mounting hole locations to match the mounting holes located on a standard 1.0\" x 1.0\" Qwiic-sized board. The overall functionality of the Qwiic Micro OLED breakout board is the same as the previous version!</p> <p>The overall board size is 1.08\" x 1.17\". There is a v-score for users that want to remove the mounting holes.</p> Board Dimensions"},{"location":"hug_micro_view/#hardware-assembly","title":"Hardware Assembly","text":"<p>If you haven't yet assembled your Qwiic Shield, now would be the time to head on over to that tutorial. With the shield assembled, SparkFun's Qwiic environment means that connecting the screen could not be easier. Just plug one end of the Qwiic cable into the OLED display, the other into the Qwiic Shield and you'll be ready to start displaying images on your little display.</p> <p>If you have a built-in Qwiic connector, you can skip the hardware assembly of the Qwiic Shield and simply insert a Qwiic cable between the two boards. Have more than one Qwiic-enabled device? You can daisy chain it to the board as well! Below is an example with the SAM-M8Q and the Qwiic Micro OLED daisy chained together to the RedBoard Qwiic.</p> <p>Note</p> <p>The initial launch of the Qwiic micro OLED breakout board had the OLED loosely attached to the breakout board. For users that received those boards, be careful handling it! You can either use your own enclosure for the OLED display, or you can use some double sided foam tape for a less permanent solution.</p> <p> </p> <p>The current production of the boards includes the double sided foam tape.</p>"},{"location":"hug_micro_view/#software","title":"Software","text":"<p>The SparkFun Micro OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide.</p> SparkFun Qwiic OLED Library API Reference Guide"},{"location":"hug_micro_view/#resources","title":"Resources","text":"<p>Now that you've successfully got your OLED displaying things, it's time to incorporate it into your own project!</p> <p>For more on the Qwiic Micro OLED, check out the links below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Datasheet (PDF)</li> <li>Bitmap Generator</li> <li>Qwiic System Landing Page</li> <li>Qwiic Micro OLED Python Package</li> <li>GitHub Hardware Repo -- Board design files for the Qwiic Micro OLED.</li> <li>Product Showcase: Qwiic Presence Sensor &amp; OLED</li> </ul>"},{"location":"hug_transparent/","title":"Qwiic Transparent Graphical OLED (1.51\", 128x56)","text":""},{"location":"hug_transparent/#introduction","title":"Introduction","text":"<p>The future is here! You asked and we delivered - our Qwiic Transparent Graphical OLED Breakout allows you to display custom images on a transparent screen using either I<sup>2</sup>C or SPI connections.</p> <p>With Qwiic connectors it's quick (ha ha) and easy to get started with your own images. However, we still have broken out 0.1\"-spaced pins in case you prefer to use a breadboard. Brilliantly lit in the dark and still visible by daylight, this OLED sports a display area of 128x64 pixels, 128x56 of which are completely transparent. Control of the OLED is based on the HyperDisplay library or SparkFun Qwiic OLED Arduino Library! For the scope of this tutorial, we will be using the SparkFun Qwiic OLED Arduino Library.</p> <p> <ul> <li> <p> </p> <p> SparkFun Transparent Graphical OLED Breakout (Qwiic)    LCD-15173    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>This hookup guide will show you how to get started drawing objects and characters on your OLED.</p>"},{"location":"hug_transparent/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun Thing Plus - ESP32 WROOOM (USB-C) [WRL-20168]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x SparkFun Transparent Graphical OLED Breakout (Qwiic)[LCD-15173]</li> </ul>"},{"location":"hug_transparent/#microcontroller","title":"Microcontroller","text":"<p>To get started, you'll need a microcontroller to, well, control everything. We used the SparkFun Thing Plus - ESP32 WROOOM. However, any of the other microcontrollers that are compatible with the Qwiic OLED Arduino Library will work as well. Below are a few from the list that we provided earlier.</p> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul>"},{"location":"hug_transparent/#usb-cable","title":"USB Cable","text":"<p>Below are a few USB cables from the SparkFun catalog. Make sure to grab the associated USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun 4-in-1 Multi-USB Cable - USB-A Host    CAB-21272 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to Reversible Micro-B Cable - 0.8m    CAB-15428 </p> </li> </ul>"},{"location":"hug_transparent/#qwiic","title":"Qwiic","text":"<p>If the controller you choose doesn't have a built-in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed:</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino    DEV-14352 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Teensy    DEV-17119 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino Nano    DEV-16789 </p> </li> </ul> <p>You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs.</p> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 200mm    PRT-17258 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 500mm    PRT-17257 </p> </li> </ul> <p>Of course, you will also need A Tranparent Graphical OLED Breakout if you have not added that to you cart already.</p> <p> <ul> <li> <p> </p> <p> SparkFun Transparent Graphical OLED Breakout (Qwiic)    LCD-15173 </p> </li> </ul> <p></p>"},{"location":"hug_transparent/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>We would also recommend taking a look at the following tutorials if you aren't familiar with them.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> </ul>"},{"location":"hug_transparent/#hardware-overview","title":"Hardware Overview","text":"<p>Listed below are some of the operating ranges and characteristics of the Transparent Graphical OLED Breakout.</p> Characteristic              Range              Voltage              1.65V-3.3V,typically 3.3V via the Qwiic Cable              Supply Current              400 mA              I<sup>2</sup>C Address              0X3C (Default), 0X3D (Closed Jumper)"},{"location":"hug_transparent/#graphical-display","title":"Graphical Display","text":"<p>The graphical display is where all the fun stuff happens. The glass itself measures 42mm x 27.16mm, with a pixel display that is 35.5 x 18mm. It houses 128x64 pixels, 128x56 of which are transparent.</p> Graphical Display"},{"location":"hug_transparent/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>There are two Qwiic connectors on the board such that you can daisy-chain the boards should you choose to do so. If you're unfamiliar with our Qwiic Connect System, head on over to our Qwiic page to see the advantages!</p> Qwiic Connectors"},{"location":"hug_transparent/#gpio-pins","title":"GPIO Pins","text":"<p>When you look at the GPIO pins, you'll notice that the labels are different from one side to the other. One side is labeled for I<sup>2</sup>C, the other side is labeled for SPI.</p> I<sup>2</sup>C Labels SPI Labels"},{"location":"hug_transparent/#power-led","title":"Power LED","text":"<p>This bad boy will light up when the board is powered up correctly.</p> Power LED <p>You can disable the power LED by cutting the LED jumpers on the back of the board.</p> Power LED Jumpers"},{"location":"hug_transparent/#jpx-jumpers","title":"JPX Jumpers","text":"<p>The JPX jumpers are used to either change the I<sup>2</sup>C address or configure the board to use SPI communications. The other two jumpers allow you to disconnect the power LED and to disconnect the I<sup>2</sup>C pull-up resistors when chaining several Qwiic devices.</p> Jumper              Function              JP1              Holds the Chip Select line low when closed. Close for I<sup>2</sup>C, open for SPI              JP2              Selects the address in I<sup>2</sup>C mode. Closed for 0x30 by default and open for 0x31. Open for SPI mode to release the D/C pin              JP3              Used to select I<sup>2</sup>C or SPI mode. Close for I<sup>2</sup>C, open for SPI              JP4              This jumper should be closed for I<sup>2</sup>C and open for SPI. This connection allows SDA to be bi-directional              JPX Jumper"},{"location":"hug_transparent/#i2c-pull-up-jumper","title":"I<sup>2</sup>C Pull-Up Jumper","text":"<p>I<sup>2</sup>C devices contain open drains so we include resistors on our boards to allow these devices to pull pins high. This becomes a problem if you have a large number of I<sup>2</sup>C devices chained together. If you plan to daisy chain more than a few Qwiic boards together, you'll need to cut this I<sup>2</sup>C pull-up jumper.</p> I<sup>2</sup>C PU Jumper"},{"location":"hug_transparent/#hardware-hookup","title":"Hardware Hookup","text":"<p>Now that you know what's available on your breakout board we can check out the options for connecting it to the brains of your project. There are two options to use - either I<sup>2</sup>C or SPI - and they each have their own advantages and drawbacks. Read on to choose the best option for your setup.</p> <p>Warning</p> <p>Reminder! This breakout can only handle up to 3.3V on the pins, so make sure to do some level shifting if you're using a 5V microcontroller.</p>"},{"location":"hug_transparent/#i2c-qwiic","title":"I<sup>2</sup>C (Qwiic)","text":"<p>The easiest way to start using the Transparent Graphical OLED is to use a Qwiic Cable along with a Qwiic compatible microcontroller (such as the ESP32 Thing Plus). You can also use the Qwiic Breadboard Cable to attach any I<sup>2</sup>C capable microcontroller, or take the scenic route and solder in all the I<sup>2</sup>C wires to the plated-through connections on the board.</p> Top View I<sup>2</sup>C Pinout/i&gt; <p>So why use I<sup>2</sup>C? It's easy to connect with the Qwiic system, and you can put up to two of the Transparent Graphical Breakouts on the same bus without using any more microcontroller pins. That simplicity comes at a cost to performance though. The maximum clock speed of the I<sup>2</sup>C bus is 400 kHz, and there is additional overhead in data transmission to indicate which bytes are data and which are commands. This means that the I<sup>2</sup>C connection is best for showing static images.</p> Breakout Pin              Microcontroller Pin Requirements              GND              Ground pin. Connect these so the two devices agree on voltages              3V3              3.3V supply pin, capable of up to 400 mA output              SDA              SDA - the bi-directional data line of your chosen I2C port              SCL              SCL - the clock line of your chosen I2C port              SA0              Optional : change the I2C address of the breakout. Make sure to cut JP2              RST              Optional : reset the breakout to a known state by pulsing this low"},{"location":"hug_transparent/#spi","title":"SPI","text":"<p>SPI solves the I<sup>2</sup>C speed problems. With SPI there is a control signal that indicates data or command and the maximum clock speed is 10 MHz -- giving SPI 50x more speed! However,  it doesn't have the same conveniences of the polarized Qwiic connector and low pin usage. You'll need to solder to the pins.</p> SPI Pinout <p>You can use SPI to connect as many breakouts as you want. For N displays you will need to use at least N + 3 data pins. That's because the MOSI, SCLK, and D/C pins can be shared between displays but each breakout needs its own dedicated Chip Select (CS) pin.</p> Breakout Pin              Microcontroller Pin Requirements              CS              A GPIO pin, set low when talking to the breakout              D/C              A GPIO pin, indicates if bytes are data or commands              SCLK              The clock output of your chosen SPI port              MOSI              The data output of your chosen SPI port              3V3              3.3V supply pin, capable of up to 400 mA output              GND              Ground pin. Connect these so the two devices agree on voltages              <p>Warning</p> <p>Make sure to cut jumpers JP1, JP2, JP3, and JP4 when using SPI mode!</p> <p> Cut Jumpers for SPI Mode </p>"},{"location":"hug_transparent/#software","title":"Software","text":"<p>The Transparent OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide.</p> SparkFun Qwiic OLED Library API Reference Guide"},{"location":"hug_transparent/#resources","title":"Resources","text":"<p>For more information on the Transparent Graphical OLED Breakout, check out some of the links here:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Qwiic OLED Arduino Library is a single graphics module that supports all SparkFun OLED boards based on the SSD1306 from Solomon Systech. Prior to this library, three different libraries were used to support our four different OLED boards.</p> <p>The SparkFun Qwiic OLED Library delivers a common implementation for all our Qwiic OLED products, delivering a unified, fast, and efficient solution that implements a familiar and easy to understand user experience.</p>"},{"location":"introduction/#key-features","title":"Key Features","text":"<ul> <li>Implements common graphics capabilities: pixel, line, rectangle, filled rectangle, circle, filled circle, bitmap, text and raster operators (i.e. XOR).</li> <li>Smart data transfer to the device \u2013 only sends dirty regions of the graphics buffer to the OLED device, not the entire buffer.</li> <li>High performance \u2013 2x faster than our previous OLED library, often much higher.</li> <li>Efficient memory usage. No dynamic memory utilized. Static resources are loaded once, and only on explicit declaration.</li> <li>Implements a familiar interface, making migration from older libraries straight forward</li> </ul>"},{"location":"introduction/#getting-started","title":"Getting Started","text":"<p>The Software Setup outlines library installation and the general use of the Qwiic OLED library.</p> <p>Detailed examples are included as part of the library installation process and available in the Arduino IDE menu:  File &gt; Examples &gt;  SparkFun Qwiic OLED Arduino Library. A walk-thru of key examples is contained in the Examples section of this documentation set.</p> <p>Note</p> <p>For v1.0.5 of the SparkFun Qwiic OLED Arduino Library, we named the library as SparkFun Qwiic OLED Graphics Library. After v1.0.6, we updated the name to say SparkFun Qwiic OLED Arduino Library. You may have multiple versions in your Arduino libraries folder if you installed the library more than once. To avoid confusion, issues compiling, and to use the latest version, we recommend removing the \"SparkFun Qwiic OLED Graphics Library\" folder should you decide to use the latest and greatest version. This will probably be located under ..Documents\\Arduino\\libraries, that is if you are using Windows.</p> <p>Note</p> <p>Note that we have more than one Arduino Library for the micro OLED. If you have the older Arduino Library, make sure to not confuse the two libraries. You will notice that the older library will be called \"SparkFun Micro OLED Breakout\". The example code will include the following line of code: <code>#include &lt;SFE_MicroOLED.h&gt;</code>.</p> <p>A full API Reference is also provided for the library.</p> SparkFun Qwiic OLED Arduino Library: API Reference"},{"location":"introduction/#supported-products","title":"Supported Products","text":"<p>The SparkFun Qwiic OLED Arduino Library supports the following SparkFun products.</p> <ul> <li> <p> </p> <p> SparkFun Micro OLED Breakout (Qwiic)    LCD-22495 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED Display (0.91 in, 128x32)    LCD-24606 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Transparent Graphical OLED Breakout (Qwiic)    LCD-15173 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED (1.3in., 128x64)    LCD-23453 </p> </li> </ul>"},{"location":"introduction/#supported-microcontrollers-arduino-environment","title":"Supported Microcontrollers - Arduino Environment","text":"<p>The following architectures are supported in the Arduino Library.</p> <ul> <li>Artemis</li> <li>SAMD51</li> <li>ESP32</li> <li>STM32</li> <li>SAMD21</li> <li>nrf5280</li> <li>Teensy</li> <li>ATMega328P</li> </ul> <p>Below are a few of those processors populated on Arduino boards from the SparkFun catalog. You will need to make sure to check the associated hookup guides for additional information about compatible cables, drivers, or board add-ons.</p> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - STM32    DEV-17712 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Turbo - SAMD21 Development Board    DEV-14812 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Pro nRF52840 Mini - Bluetooth Development Board    DEV-15025 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun MicroMod Teensy Processor    DEV-16402 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <p>Note</p> <p>Unfortunately, the ATmega32U4 is not supported under this library. We recommend either using a different microcontroller or rolling back to the previous library written for the display.</p>"},{"location":"introduction/#license","title":"License","text":"<p>The SparkFun Qwiic OLED Arduino Library is licensed using the Open Source MIT License:</p> <pre><code>The MIT License (MIT)\n\nCopyright (c) 2015 SparkFun Electronics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"single_page/","title":"Getting Started","text":""},{"location":"single_page/#introduction","title":"Introduction","text":"<p>The SparkFun Qwiic OLED Arduino Library is a single graphics module that supports all SparkFun OLED boards based on the SSD1306 from Solomon Systech. Prior to this library, three different libraries were used to support our four different OLED boards.</p> <p>The SparkFun Qwiic OLED Library delivers a common implementation for all our Qwiic OLED products, delivering a unified, fast, and efficient solution that implements a familiar and easy to understand user experience.</p>"},{"location":"single_page/#key-features","title":"Key Features","text":"<ul> <li>Implements common graphics capabilities: pixel, line, rectangle, filled rectangle, circle, filled circle, bitmap, text and raster operators (i.e. XOR).</li> <li>Smart data transfer to the device \u2013 only sends dirty regions of the graphics buffer to the OLED device, not the entire buffer.</li> <li>High performance \u2013 2x faster than our previous OLED library, often much higher.</li> <li>Efficient memory usage. No dynamic memory utilized. Static resources are loaded once, and only on explicit declaration.</li> <li>Implements a familiar interface, making migration from older libraries straight forward</li> </ul>"},{"location":"single_page/#getting-started_1","title":"Getting Started","text":"<p>The Software Setup outlines library installation and the general use of the Qwiic OLED library.</p> <p>Detailed examples are included as part of the library installation process and available in the Arduino IDE menu:  File &gt; Examples &gt;  SparkFun Qwiic OLED Arduino Library. A walk-thru of key examples is contained in the Examples section of this documentation set.</p> <p>Note</p> <p>For v1.0.5 of the SparkFun Qwiic OLED Arduino Library, we named the library as SparkFun Qwiic OLED Graphics Library. After v1.0.6, we updated the name to say SparkFun Qwiic OLED Arduino Library. You may have multiple versions in your Arduino libraries folder if you installed the library more than once. To avoid confusion, issues compiling, and to use the latest version, we recommend removing the \"SparkFun Qwiic OLED Graphics Library\" folder should you decide to use the latest and greatest version. This will probably be located under ..Documents\\Arduino\\libraries, that is if you are using Windows.</p> <p>Note</p> <p>Note that we have more than one Arduino Library for the micro OLED. If you have the older Arduino Library, make sure to not confuse the two libraries. You will notice that the older library will be called \"SparkFun Micro OLED Breakout\". The example code will include the following line of code: <code>#include &lt;SFE_MicroOLED.h&gt;</code>.</p> <p>A full API Reference is also provided for the library.</p> SparkFun Qwiic OLED Arduino Library: API Reference"},{"location":"single_page/#supported-products","title":"Supported Products","text":"<p>The SparkFun Qwiic OLED Arduino Library supports the following SparkFun products.</p> <ul> <li> <p> </p> <p> SparkFun Micro OLED Breakout (Qwiic)    LCD-22495 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED Display (0.91 in, 128x32)    LCD-24606 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Transparent Graphical OLED Breakout (Qwiic)    LCD-15173 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED (1.3in., 128x64)    LCD-23453 </p> </li> </ul>"},{"location":"single_page/#supported-microcontrollers-arduino-environment","title":"Supported Microcontrollers - Arduino Environment","text":"<p>The following architectures are supported in the Arduino Library.</p> <ul> <li>Artemis</li> <li>SAMD51</li> <li>ESP32</li> <li>STM32</li> <li>SAMD21</li> <li>nrf5280</li> <li>Teensy</li> <li>ATMega328P</li> </ul> <p>Below are a few of those processors populated on Arduino boards from the SparkFun catalog. You will need to make sure to check the associated hookup guides for additional information about compatible cables, drivers, or board add-ons.</p> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - STM32    DEV-17712 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Turbo - SAMD21 Development Board    DEV-14812 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Pro nRF52840 Mini - Bluetooth Development Board    DEV-15025 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun MicroMod Teensy Processor    DEV-16402 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <p>Note</p> <p>Unfortunately, the ATmega32U4 is not supported under this library. We recommend either using a different microcontroller or rolling back to the previous library written for the display.</p>"},{"location":"single_page/#license","title":"License","text":"<p>The SparkFun Qwiic OLED Arduino Library is licensed using the Open Source MIT License:</p> <pre><code>The MIT License (MIT)\n\nCopyright (c) 2015 SparkFun Electronics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"single_page/#qwiic-micro-oled-066-64x48","title":"Qwiic Micro OLED (0.66\", 64x48)","text":""},{"location":"single_page/#introduction_1","title":"Introduction","text":"<p>The Qwiic Micro OLED is a Qwiic enabled version of our micro OLED display! This small monochrome, blue-on-black OLED display displays incredibly clear images.</p> <p> <ul> <li> <p> </p> <p> SparkFun Micro OLED Breakout (Qwiic)    LCD-22495    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>This hookup guide will show you how to get started drawing objects and characters on your OLED.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Plus [DEV-18158]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x SparkFun Micro OLED Breakout (Qwiic) [LCD-22495]</li> </ul>"},{"location":"single_page/#microcontroller","title":"Microcontroller","text":"<p>To get started, you'll need a microcontroller to, well, control everything. We used the RedBoard with the ATmega328P for the Qwiic micro OLED. However, any of the other microcontrollers that are compatible with the Qwiic OLED Arduino Library will work as well. Below are a few from the list that we provided earlier.</p> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul>"},{"location":"single_page/#usb-cable","title":"USB Cable","text":"<p>Below are a few USB cables from the SparkFun catalog. Make sure to grab the associated USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun 4-in-1 Multi-USB Cable - USB-A Host    CAB-21272 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to Reversible Micro-B Cable - 0.8m    CAB-15428 </p> </li> </ul>"},{"location":"single_page/#qwiic","title":"Qwiic","text":"<p>If the controller you choose doesn't have a built-in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed:</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino    DEV-14352 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Teensy    DEV-17119 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino Nano    DEV-16789 </p> </li> </ul> <p>You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs.</p> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 200mm    PRT-17258 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 500mm    PRT-17257 </p> </li> </ul> <p>Of course, you will also need a Qwiic Micro OLED if you have not added that to you cart already.</p> <p> <ul> <li> <p> </p> <p> SparkFun Micro OLED Breakout (Qwiic)    LCD-22495 </p> </li> </ul> <p></p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>We would also recommend taking a look at the following tutorials if you aren't familiar with them.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Listed below are some of the operating ranges and characteristics of the Qwiic Micro OLED.</p> Characteristic              Range              Voltage 3.3V Temperature -40\u00b0C to 85\u00b0C I<sup>2</sup>C Address 0X3D (Default) or 0X3C (Closed Jumper)"},{"location":"single_page/#pins","title":"Pins","text":"<p>Power and I<sup>2</sup>C pins are broken out to the 1x4 PTH pins as well as the two horizontal Qwiic connectors.</p> Pin              Description              Direction              GND Ground In 3.3V Power In SDA I<sup>2</sup>C Data In SCL I<sup>2</sup>C Clock In"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>There are several jumpers on board that can be changed to facilitate several different functions. The first of which is the I<sup>2</sup>C pull-up jumper to disable the 2.2k\u03a9 pull up resistors on the I<sup>2</sup>C data and clock lines, highlighted below. If multiple boards are connected to the I<sup>2</sup>C bus, the equivalent resistance goes down, increasing your pull up strength. If multiple boards are connected on the same bus, make sure only one board has the pull-up resistors connected.</p> I2C Pull-Up Jumper <p>The ADDR jumper (highlighted below) can be used to change the I<sup>2</sup>C address of the board. The default jumper is open by default, pulling the address pin high and giving us an I<sup>2</sup>C address of 0X3D. Closing this jumper will ground the address pin, giving us an I<sup>2</sup>C address of 0X3C.</p> Address Jumper"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>Revision Change</p> <p>For V11, we have optimized the two mounting hole locations to match the mounting holes located on a standard 1.0\" x 1.0\" Qwiic-sized board. The overall functionality of the Qwiic Micro OLED breakout board is the same as the previous version!</p> <p>The overall board size is 1.08\" x 1.17\". There is a v-score for users that want to remove the mounting holes.</p> Board Dimensions"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":"<p>If you haven't yet assembled your Qwiic Shield, now would be the time to head on over to that tutorial. With the shield assembled, SparkFun's Qwiic environment means that connecting the screen could not be easier. Just plug one end of the Qwiic cable into the OLED display, the other into the Qwiic Shield and you'll be ready to start displaying images on your little display.</p> <p>If you have a built-in Qwiic connector, you can skip the hardware assembly of the Qwiic Shield and simply insert a Qwiic cable between the two boards. Have more than one Qwiic-enabled device? You can daisy chain it to the board as well! Below is an example with the SAM-M8Q and the Qwiic Micro OLED daisy chained together to the RedBoard Qwiic.</p> <p>Note</p> <p>The initial launch of the Qwiic micro OLED breakout board had the OLED loosely attached to the breakout board. For users that received those boards, be careful handling it! You can either use your own enclosure for the OLED display, or you can use some double sided foam tape for a less permanent solution.</p> <p> </p> <p>The current production of the boards includes the double sided foam tape.</p>"},{"location":"single_page/#software","title":"Software","text":"<p>The SparkFun Micro OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide.</p> SparkFun Qwiic OLED Library API Reference Guide"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your OLED displaying things, it's time to incorporate it into your own project!</p> <p>For more on the Qwiic Micro OLED, check out the links below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Datasheet (PDF)</li> <li>Bitmap Generator</li> <li>Qwiic System Landing Page</li> <li>Qwiic Micro OLED Python Package</li> <li>GitHub Hardware Repo -- Board design files for the Qwiic Micro OLED.</li> <li>Product Showcase: Qwiic Presence Sensor &amp; OLED</li> </ul>"},{"location":"single_page/#qwiic-transparent-graphical-oled-151-128x56","title":"Qwiic Transparent Graphical OLED (1.51\", 128x56)","text":""},{"location":"single_page/#introduction_2","title":"Introduction","text":"<p>The future is here! You asked and we delivered - our Qwiic Transparent Graphical OLED Breakout allows you to display custom images on a transparent screen using either I<sup>2</sup>C or SPI connections.</p> <p>With Qwiic connectors it's quick (ha ha) and easy to get started with your own images. However, we still have broken out 0.1\"-spaced pins in case you prefer to use a breadboard. Brilliantly lit in the dark and still visible by daylight, this OLED sports a display area of 128x64 pixels, 128x56 of which are completely transparent. Control of the OLED is based on the HyperDisplay library or SparkFun Qwiic OLED Arduino Library! For the scope of this tutorial, we will be using the SparkFun Qwiic OLED Arduino Library.</p> <p> <ul> <li> <p> </p> <p> SparkFun Transparent Graphical OLED Breakout (Qwiic)    LCD-15173    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>This hookup guide will show you how to get started drawing objects and characters on your OLED.</p>"},{"location":"single_page/#required-materials_1","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun Thing Plus - ESP32 WROOOM (USB-C) [WRL-20168]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x SparkFun Transparent Graphical OLED Breakout (Qwiic)[LCD-15173]</li> </ul>"},{"location":"single_page/#microcontroller_1","title":"Microcontroller","text":"<p>To get started, you'll need a microcontroller to, well, control everything. We used the SparkFun Thing Plus - ESP32 WROOOM. However, any of the other microcontrollers that are compatible with the Qwiic OLED Arduino Library will work as well. Below are a few from the list that we provided earlier.</p> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul>"},{"location":"single_page/#usb-cable_1","title":"USB Cable","text":"<p>Below are a few USB cables from the SparkFun catalog. Make sure to grab the associated USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun 4-in-1 Multi-USB Cable - USB-A Host    CAB-21272 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to Reversible Micro-B Cable - 0.8m    CAB-15428 </p> </li> </ul>"},{"location":"single_page/#qwiic_1","title":"Qwiic","text":"<p>If the controller you choose doesn't have a built-in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed:</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino    DEV-14352 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Teensy    DEV-17119 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino Nano    DEV-16789 </p> </li> </ul> <p>You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs.</p> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 200mm    PRT-17258 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 500mm    PRT-17257 </p> </li> </ul> <p>Of course, you will also need A Tranparent Graphical OLED Breakout if you have not added that to you cart already.</p> <p> <ul> <li> <p> </p> <p> SparkFun Transparent Graphical OLED Breakout (Qwiic)    LCD-15173 </p> </li> </ul> <p></p>"},{"location":"single_page/#suggested-reading_1","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>We would also recommend taking a look at the following tutorials if you aren't familiar with them.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> </ul>"},{"location":"single_page/#hardware-overview_1","title":"Hardware Overview","text":"<p>Listed below are some of the operating ranges and characteristics of the Transparent Graphical OLED Breakout.</p> Characteristic              Range              Voltage              1.65V-3.3V,typically 3.3V via the Qwiic Cable              Supply Current              400 mA              I<sup>2</sup>C Address              0X3C (Default), 0X3D (Closed Jumper)"},{"location":"single_page/#graphical-display","title":"Graphical Display","text":"<p>The graphical display is where all the fun stuff happens. The glass itself measures 42mm x 27.16mm, with a pixel display that is 35.5 x 18mm. It houses 128x64 pixels, 128x56 of which are transparent.</p> Graphical Display"},{"location":"single_page/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>There are two Qwiic connectors on the board such that you can daisy-chain the boards should you choose to do so. If you're unfamiliar with our Qwiic Connect System, head on over to our Qwiic page to see the advantages!</p> Qwiic Connectors"},{"location":"single_page/#gpio-pins","title":"GPIO Pins","text":"<p>When you look at the GPIO pins, you'll notice that the labels are different from one side to the other. One side is labeled for I<sup>2</sup>C, the other side is labeled for SPI.</p> I<sup>2</sup>C Labels SPI Labels"},{"location":"single_page/#power-led","title":"Power LED","text":"<p>This bad boy will light up when the board is powered up correctly.</p> Power LED <p>You can disable the power LED by cutting the LED jumpers on the back of the board.</p> Power LED Jumpers"},{"location":"single_page/#jpx-jumpers","title":"JPX Jumpers","text":"<p>The JPX jumpers are used to either change the I<sup>2</sup>C address or configure the board to use SPI communications. The other two jumpers allow you to disconnect the power LED and to disconnect the I<sup>2</sup>C pull-up resistors when chaining several Qwiic devices.</p> Jumper              Function              JP1              Holds the Chip Select line low when closed. Close for I<sup>2</sup>C, open for SPI              JP2              Selects the address in I<sup>2</sup>C mode. Closed for 0x30 by default and open for 0x31. Open for SPI mode to release the D/C pin              JP3              Used to select I<sup>2</sup>C or SPI mode. Close for I<sup>2</sup>C, open for SPI              JP4              This jumper should be closed for I<sup>2</sup>C and open for SPI. This connection allows SDA to be bi-directional              JPX Jumper"},{"location":"single_page/#i2c-pull-up-jumper","title":"I<sup>2</sup>C Pull-Up Jumper","text":"<p>I<sup>2</sup>C devices contain open drains so we include resistors on our boards to allow these devices to pull pins high. This becomes a problem if you have a large number of I<sup>2</sup>C devices chained together. If you plan to daisy chain more than a few Qwiic boards together, you'll need to cut this I<sup>2</sup>C pull-up jumper.</p> I<sup>2</sup>C PU Jumper"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>Now that you know what's available on your breakout board we can check out the options for connecting it to the brains of your project. There are two options to use - either I<sup>2</sup>C or SPI - and they each have their own advantages and drawbacks. Read on to choose the best option for your setup.</p> <p>Warning</p> <p>Reminder! This breakout can only handle up to 3.3V on the pins, so make sure to do some level shifting if you're using a 5V microcontroller.</p>"},{"location":"single_page/#i2c-qwiic","title":"I<sup>2</sup>C (Qwiic)","text":"<p>The easiest way to start using the Transparent Graphical OLED is to use a Qwiic Cable along with a Qwiic compatible microcontroller (such as the ESP32 Thing Plus). You can also use the Qwiic Breadboard Cable to attach any I<sup>2</sup>C capable microcontroller, or take the scenic route and solder in all the I<sup>2</sup>C wires to the plated-through connections on the board.</p> Top View I<sup>2</sup>C Pinout/i&gt; <p>So why use I<sup>2</sup>C? It's easy to connect with the Qwiic system, and you can put up to two of the Transparent Graphical Breakouts on the same bus without using any more microcontroller pins. That simplicity comes at a cost to performance though. The maximum clock speed of the I<sup>2</sup>C bus is 400 kHz, and there is additional overhead in data transmission to indicate which bytes are data and which are commands. This means that the I<sup>2</sup>C connection is best for showing static images.</p> Breakout Pin              Microcontroller Pin Requirements              GND              Ground pin. Connect these so the two devices agree on voltages              3V3              3.3V supply pin, capable of up to 400 mA output              SDA              SDA - the bi-directional data line of your chosen I2C port              SCL              SCL - the clock line of your chosen I2C port              SA0              Optional : change the I2C address of the breakout. Make sure to cut JP2              RST              Optional : reset the breakout to a known state by pulsing this low"},{"location":"single_page/#spi","title":"SPI","text":"<p>SPI solves the I<sup>2</sup>C speed problems. With SPI there is a control signal that indicates data or command and the maximum clock speed is 10 MHz -- giving SPI 50x more speed! However,  it doesn't have the same conveniences of the polarized Qwiic connector and low pin usage. You'll need to solder to the pins.</p> SPI Pinout <p>You can use SPI to connect as many breakouts as you want. For N displays you will need to use at least N + 3 data pins. That's because the MOSI, SCLK, and D/C pins can be shared between displays but each breakout needs its own dedicated Chip Select (CS) pin.</p> Breakout Pin              Microcontroller Pin Requirements              CS              A GPIO pin, set low when talking to the breakout              D/C              A GPIO pin, indicates if bytes are data or commands              SCLK              The clock output of your chosen SPI port              MOSI              The data output of your chosen SPI port              3V3              3.3V supply pin, capable of up to 400 mA output              GND              Ground pin. Connect these so the two devices agree on voltages              <p>Warning</p> <p>Make sure to cut jumpers JP1, JP2, JP3, and JP4 when using SPI mode!</p> <p> Cut Jumpers for SPI Mode </p>"},{"location":"single_page/#software_1","title":"Software","text":"<p>The Transparent OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide.</p> SparkFun Qwiic OLED Library API Reference Guide"},{"location":"single_page/#resources_1","title":"Resources","text":"<p>For more information on the Transparent Graphical OLED Breakout, check out some of the links here:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul>"},{"location":"single_page/#qwiic-oled-091-128x32","title":"Qwiic OLED (0.91\", 128x32)","text":""},{"location":"single_page/#introduction_3","title":"Introduction","text":"<p>The SparkFun Qwiic OLED Display can display up to four lines of text and features 128x32 pixels in a small 0.91\u201d (diagonal) frame. As an OLED, this display does not have a back light layer (unlike LCDs) and therefore it\u2019s thinner, consumes less power, and has higher contrast.</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED Display (0.91 in., 128x32)    LCD-24606    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this section, we'll go over the hardware and how to hookup the breakout board.</p>"},{"location":"single_page/#required-materials_2","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun RedBoard Plus [DEV-18158]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 50mm [PRT-17260], for short distances</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257], for those that need to wire the board farther away from your microcontroller</li> </ul> </li> <li>1x SparkFun Qwiic OLED Display (0.91 in., 128x32) [LCD-22495]</li> </ul>"},{"location":"single_page/#microcontroller_2","title":"Microcontroller","text":"<p>To get started, you'll need a microcontroller to, well, control everything. We used the RedBoard with the ATmega328P for the Qwiic micro OLED. However, any of the other microcontrollers that are compatible with the Qwiic OLED Arduino Library will work as well. Below are a few from the list that we provided earlier.</p> <ul> <li> <p> </p> <p> SparkFun RedBoard Plus (ATmega328P)    DEV-18158 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - Artemis    WRL-15574 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C)    WRL-20168 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Thing Plus - SAMD51    DEV-14713 </p> </li> </ul>"},{"location":"single_page/#usb-cable_2","title":"USB Cable","text":"<p>Below are a few USB cables from the SparkFun catalog. Make sure to grab the associated USB cable that is compatible with your microcontroller.</p> <ul> <li> <p> </p> <p> SparkFun 4-in-1 Multi-USB Cable - USB-A Host    CAB-21272 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to Reversible Micro-B Cable - 0.8m    CAB-15428 </p> </li> </ul>"},{"location":"single_page/#qwiic_2","title":"Qwiic","text":"<p>If the controller you choose doesn't have a built-in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed:</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino    DEV-14352 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Teensy    DEV-17119 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Shield for Arduino Nano    DEV-16789 </p> </li> </ul> <p>You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs.</p> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 50mm    PRT-17260 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 200mm    PRT-17258 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 500mm    PRT-17257 </p> </li> </ul> <p>Of course, you will also need a Qwiic Micro OLED if you have not added that to you cart already.</p> <p> <ul> <li> <p> </p> <p> SparkFun Qwiic OLED Display (0.91 in., 128x32)    LCD-24606 </p> </li> </ul> <p></p>"},{"location":"single_page/#hardware-overview_2","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Qwiic OLED Display (0.91 in., 128x32).</p> Top View Bottom View"},{"location":"single_page/#oled-display-091-128x32","title":"OLED Display (0.91\", 128x32)","text":"<p>The OLED screen has a pixel resolution of 128x32, a panel size of 30.0mm x 11.5mm x 1.2mm, and an active area of 22.384mm x 5.584mm. The driver chip is the SSD1306. For information can be found in the datasheet linked in the Resources.</p> OLED Highlighted <p>Note</p> <p>The SparkFun Qwiic OLED Arduino Library works for multiple displays. However, there are some caveats in the size of the display with the text. While you can technically display all fonts in the narrow OLED display, some characters (numbers, letters, and/or symbols depending on the font) will be too big to fully display on the screen. For example, the fonts for the 31x48 (i.e. <code>&amp;QW_FONT_31X48</code>) and large numbers (i.e. <code>&amp;QW_FONT_LARGENUM</code>) are too big to fit within the display.</p> <p>Using the OLED display (0.91\", 128x32) we found that we were able to fit:</p> <ul> <li>4x lines, 21x characters using the 5x7 (i.e. <code>&amp;QW_FONT_5X7</code>)</li> <li>2x lines, 14x characters using the 8x16 (i.e. <code>&amp;QW_FONT_8X16</code>)</li> <li>2x lines, 11x characters using the 7 segment (i.e. <code>&amp;QW_FONT_7SEGMENT</code>)</li> </ul>"},{"location":"single_page/#power","title":"Power","text":"<p>Power is applied through the vertical Qwiic connectors on the back of the board. The recommended input voltage is 3.3V. The logic levels for the Qwiic OLED Display (0.9\", 128x32) is 3.3V.</p> Power"},{"location":"single_page/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>There are two vertical Qwiic connectors populated on the back of the board. You can use either connectors to provide power and send data through I<sup>2</sup>C. The Qwiic ecosystem is made for fast prototyping by removing the need for soldering. All you need to do is plug a Qwiic cable into the Qwiic connector and voila!</p> <ul> <li>SCL \u2014 I<sup>2</sup>C clock</li> <li>SDA \u2014 I<sup>2</sup>C data</li> <li>3.3V \u2014 Power</li> <li>GND \u2014 Ground</li> </ul> Vertical Qwiic Connectors <p>The address of the display is 0x3C.</p> <p>Note</p> <p>On the back of the board, the power and I<sup>2</sup>C pins are broken out to test points. These are used in our production department for quality control using custom testbeds. These could be an alternative option to connect to the pins. However, we recommend using the Qwiic connectors to easily connect to the OLED display. Note that the I<sup>2</sup>C pins are also in a different order compared to a standard I<sup>2</sup>C Qwiic connector should you decide to solder to the test points.</p> <p> I2C Test Points </p>"},{"location":"single_page/#jumpers_1","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The board includes a 1x3 jumper on the back of the board.</p> <ul> <li>I2C \u2014 This three way jumper labeled I2C is connected to two 4.7k\u03a9 pull-up resistors to the I<sup>2</sup>C data and clock lines. For users that have multiple Qwiic-enabled devices with pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> </ul> Jumpers Highlighted"},{"location":"single_page/#board-dimensions_1","title":"Board Dimensions","text":"<p>Version 1.1 is a bit smaller than previous versions since the board includes vertical Qwiic connectors on the back of the board. The overall board size is 1.75 in x 0.5 in. The mounting holes have also moved to toward the top of the board.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup_1","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect to the display. We will go just a bit further and talk about how to mount the display.</p>"},{"location":"single_page/#connecting-via-qwiic-connector","title":"Connecting via Qwiic Connector","text":"<p>Insert a Qwiic cable between your chosen microcontroller and Qwiic OLED. Then insert a USB cable between the microcontroller and your computer's COM port. For the scope of this tutorial, the USB cable provides power and allows us to upload code to the microcontroller. Of course, you can also debug the display by opening a Serial Terminal.</p> USB Cable, RedBoard Plus (ATMega328P), Qwiic Cable, Qwiic OLED (0.9 in., 12x32) <p>Once you have finished prototyping, you could continue to use the USB cable and add a 5V power supply or battery pack.</p>"},{"location":"single_page/#mounting-the-qwiic-oled-09-128x32","title":"Mounting the Qwiic OLED (0.9\", 128x32)","text":"<p>Grab the board dimensions and cut out a rectangle in the enclosure. For users that want to mount the board so that the OLED display is flush against the enclosure, you will need to look at the dimensions based on the OLED. You will need to add a little tolerance so that the display can fit through the rectangle. For users that need to quickly mount the board, you will could also cut out rectangles based on the vertical Qwiic connector so that the wires can lead into the enclosure. Then cut out the mounting holes so that the board is right side up. In this case, we used a cardboard box as a quick example to demonstrate the Qwiic wires connecting leading into the enclosure.</p> Qwiic OLED Display Mounted in an Enclosure <p>Note</p> <p>To easily display text and graphics on the board, we recommend mounting the board right side up. There is an option in the example code to flip the text horizontally and vertically should you decide to mount the board upside down, but you would need to also determine the position of the text.</p> <p>For a more durable enclosure, you could use wood, metal, or plastic. However, you will need additional tools to cut into the material.</p>"},{"location":"single_page/#software_2","title":"Software","text":"<p>The Qwiic OLED (0.91\", 128x32) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED Library's Software Setup has instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide.</p> SparkFun Qwiic OLED Library API Reference Guide"},{"location":"single_page/#resources_2","title":"Resources","text":"<p>Now that you've successfully got your OLED Display (0.9\", 128x36) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Datasheet (PDF) (0.91\", 128x32, SSD1306)</li> <li>ReadtheDocs: Qwiic_OLED_Display_Py</li> <li>Qwiic OLED Display Python Package Repo</li> <li>Github Hardware Repo</li> </ul>"},{"location":"single_page/#qwiic-oled-13-128x64","title":"Qwiic OLED (1.3\", 128x64)","text":"<p>The Qwiic OLED 1.3in has its own hook-up guide.</p>"},{"location":"single_page/#software-setup","title":"Software Setup","text":""},{"location":"single_page/#software-setup_1","title":"Software Setup","text":""},{"location":"single_page/#installation","title":"Installation","text":"<p>Arduino</p> <p>This guide assumes you are using the latest version of the Arduino IDE on your desktop. The following resources available at SparkFun provide the details on setting up and configuring Arduino to use this library.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>The SparkFun Qwiic OLED Arduino Library is available within in the Arduino library manager, which is launched via the Sketch &gt; Include Libraries &gt; Manage Libraries \u2026 menu option in the Arduino IDE. Just search for SparkFun Qwiic OLED Library.</p> <p>Note</p> <p>If you've never connected a USB-to-serial converter to your computer before, you may need to install drivers. The drivers will depend on what is populated on your Arduino development board. Check out the following tutorials for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> <li>How to Install FTDI Drivers</li> <li>How to Install CP2104 Drivers</li> </ul>"},{"location":"single_page/#general-use-pattern","title":"General Use Pattern","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library.</p> <pre><code>// Include the SparkFun qwiic OLED Library\n#include &lt;SparkFun_Qwiic_OLED.h&gt;\n</code></pre> <p>The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions.</p> <p>The user selects from one of the following classes:</p> Class Qwiic OLED Device <code>QwiicMicroOLED</code> SparkFun Qwiic Micro OLED  <code>QwiicNarrowOLED</code> SparkFun Qwiic OLED Display (128x32)  <code>QwiicTransparentOLED</code> SparkFun Transparent Graphical OLED <code>Qwiic1in3OLED</code> SparkFun Qwiic OLED 1.3\" Display (128x32)  <p>For this example, the Qwiic Micro OLED is used.</p> <pre><code>QwiicMicroOLED myOLED;\n</code></pre> <p>In the <code>setup()</code> function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the <code>begin()</code> method. This method returns a value of <code>true</code> on success, or <code>false</code> on failure.</p> <pre><code>int width, height;  // global variables for use in the sketch\nvoid setup()\n{\n    Serial.begin(115200);\n    if(!myOLED.begin()){\n        Serial.println(\"Device failed to initialize\");\n        while(1);  // halt execution\n    }\n    Serial.println(\"Device is initialized\");\n\n}\n</code></pre> <p>Now that the library is initialized, the desired graphics are drawn. Here we erase the screen and draw simple series of lines that originate at the screen origin and fan out across the height of the display.</p> <p>Note</p> <p>Graphics are not send to the OLED device when drawn. Updates are only sent to the device when the <code>display()</code> method is called. This minimizes data transfers to the OLED device, delivering a responsive display response.</p> <pre><code>    myOLED.erase();           // Erase the screen\n    myOLED.display();         // Send erase to device\n\n    delay(1000);    // Slight pause\n\n    // Draw our lines from point (0,0) to (i, screen height)\n\n    for(int i=0; i &lt; width; i+= 6){\n        myOLED.line(0, 0, i, height-1);    // draw the line\n        myOLED.display();                  // Send the new line to the device for display\n    }\n</code></pre>"},{"location":"single_page/#library-provided-examples","title":"Library Provided Examples","text":"<p>The SparkFun Qwiic OLED Arduino Library, includes a wide variety of examples. These are available from the Examples menu of the Arduino IDE, and in the <code>examples</code>folder of this repository.</p> <p>For a detailed description of the examples, see the Examples section of the documentation.</p>"},{"location":"single_page/#api-reference","title":"API Reference","text":""},{"location":"single_page/#device","title":"Device","text":""},{"location":"single_page/#device-operations","title":"Device Operations","text":"<p>Methods to setup the device, get device information and change display options.</p>"},{"location":"single_page/#initialization","title":"Initialization","text":""},{"location":"single_page/#begin","title":"begin()","text":"<p>This method is called to initialize the OLED library and connection to the OLED device. This method must be called before calling any graphics methods. </p> <pre><code>bool begin(TwoWire &amp;wirePort, uint8_t address)\n</code></pre> Parameter Type Description <code>wirePort</code> <code>TwoWire</code> optional. The Wire port. If not provided, the default port is used <code>address</code> <code>uint8_t</code> optional. I2C Address. If not provided, the default address is used. return value <code>bool</code> <code>true</code> on success, <code>false</code> on startup failure"},{"location":"single_page/#reset","title":"reset()","text":"<p>When called, this method reset the library state and OLED device to their intial state. Helpful to reset the OLED after waking up a system from a sleep state.</p> <pre><code>void reset()\n</code></pre> Parameter Type Description return value <code>bool</code> <code>true</code> on success, <code>false</code> on startup failure"},{"location":"single_page/#geometry","title":"Geometry","text":""},{"location":"single_page/#getwidth","title":"getWidth()","text":"<p>This method returns the width, in pixels, of the connected OLED device</p> <pre><code>uint8_t getWidth(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The width in pixels of the connected OLED device"},{"location":"single_page/#getheight","title":"getHeight()","text":"<p>This method returns the height, in pixels, of the connected OLED device</p> <pre><code>uint8_t getHeight(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The height in pixels of the connected OLED device"},{"location":"single_page/#display-modes","title":"Display Modes","text":""},{"location":"single_page/#invert","title":"invert()","text":"<p>This method inverts the current graphics on the display. This results of this command happen immediatly.</p> <pre><code>void invert(bool bInvert)\n</code></pre> Parameter Type Description <code>bInvert</code> <code>bool</code> <code>true</code> - the screen is inverted. <code>false</code> - the screen is set to normal"},{"location":"single_page/#flipvertical","title":"flipVertical()","text":"<p>When called, the screen contents are flipped vertically if the flip parameter is true, or restored to normal display if the flip parameter is false. </p> <pre><code>void flipVertical(bool bFlip)\n</code></pre> Parameter Type Description <code>bFlip</code> <code>bool</code> <code>true</code> - the screen is flipped vertically. <code>false</code> - the screen is set to normal"},{"location":"single_page/#fliphorizontal","title":"flipHorizontal()","text":"<p>When called, the screen contents are flipped horizontally if the flip parameter is true, or restored to normal display if the flip parameter is false. </p> <pre><code>void flipHorizontal(bool bFlip)\n</code></pre> Parameter Type Description <code>bFlip</code> <code>bool</code> <code>true</code> - the screen is flipped horizontally. <code>false</code> - the screen is set to normal"},{"location":"single_page/#displaypower","title":"displayPower()","text":"<p>Used to turn the OLED display on or off. </p> <pre><code>void displayPower(bool bEnable)\n</code></pre> Parameter Type Description <code>bEnable</code> <code>bool</code> <code>true</code> - the OLED display is powered on (default). <code>false</code> - the OLED dsiplay is powered off."},{"location":"single_page/#scrolling","title":"Scrolling","text":""},{"location":"single_page/#scrolling_1","title":"Scrolling","text":"<p>Methods for device scrolling</p>"},{"location":"single_page/#scrollstop","title":"scrollStop()","text":"<p>If the device is in a scrolling mode, calling this method stops the scroll, and restores the device to normal display operation. This action is performed immediately.</p> <pre><code>void scrollStop(void)\n</code></pre> Parameter Type Description NONE"},{"location":"single_page/#scrollright","title":"scrollRight()","text":"<p>This method is called to start the device scrolling the displayed graphics to the right. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrollRight(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed below <p>Defined values for the <code>interval</code> parameter:</p> Defined Symbol Time Interval Between Steps <code>SCROLL_INTERVAL_2_FRAMES</code> 2 <code>SCROLL_INTERVAL_3_FRAMES</code> 3 <code>SCROLL_INTERVAL_4_FRAMES</code> 4 <code>SCROLL_INTERVAL_5_FRAMES</code> 5 <code>SCROLL_INTERVAL_25_FRAMES</code> 25 <code>SCROLL_INTERVAL_64_FRAMES</code> 64 <code>SCROLL_INTERVAL_128_FRAMES</code> 128 <code>SCROLL_INTERVAL_256_FRAMES</code> 256"},{"location":"single_page/#scrollvertright","title":"scrollVertRight()","text":"<p>This method is called to start the device scrolling the displayed graphics vertically and to the right. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrolVertlRight(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed in <code>scrollRight</code>"},{"location":"single_page/#scrollleft","title":"scrollLeft()","text":"<p>This method is called start to the device scrolling the displayed graphics to the left. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrollLeft(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed in <code>scrollRight</code>"},{"location":"single_page/#scrollvertleft","title":"scrollVertLeft()","text":"<p>This method is called to start the device scrolling the displayed graphics vertically and to the left. This action is performed immediately.</p> <p>The screen will scroll until the <code>scrollStop()</code> method is called.</p> <pre><code>void scrolVertlLeft(uint8_t start, uint8_t stop, uint8_t interval)\n</code></pre> Parameter Type Description <code>start</code> <code>uint8_t</code> The start page address of the scroll - valid values are 0 thru 7 <code>stop</code> <code>uint8_t</code> The stop/end page address of the scroll - valid values are 0 thru 7 <code>interval</code> <code>uint8_t</code> The time interval between scroll step - values listed in <code>scrollRight</code>"},{"location":"single_page/#drawing-state","title":"Drawing State","text":""},{"location":"single_page/#drawing-settingsstate","title":"Drawing Settings/State","text":"<p>Methods for setting the drawing state of the library.</p>"},{"location":"single_page/#setfont","title":"setFont()","text":"<p>This method is called to set the current font in the library. The current font is used when calling the <code>text()</code> method on this device. </p> <p>The default font for the device is <code>5x7</code>.</p> <pre><code>void setFont(QwiicFont&amp; theFont)\nvoid setFont(const QwiicFont * theFont)\n</code></pre> Parameter Type Description <code>theFont</code> <code>QwiicFont</code> The font to set as current in the device <code>theFont</code> <code>QwiicFont*</code> Pointer to the font to set as current in the device. <p>For the library, fonts are added to your program by including them via include files which are part of this library. </p> <p>The following fonts are included:</p> Font Include File Font Variable Description 5x7 <code>&lt;res/qw_fnt_5x7.h&gt;</code> <code>QW_FONT_5X7</code> A full, 5 x 7 font 31x48 <code>&lt;res/qw_fnt_31x48.h&gt;</code> <code>QW_FONT_31X48</code> A full, 31 x 48 font Seven Segment <code>&lt;res/qw_fnt_7segment.h&gt;</code> <code>QW_FONT_7SEGMENT</code> Numbers only 8x16 <code>&lt;res/qw_fnt_8x16.h&gt;</code> <code>QW_FONT_8X16</code> A full, 8 x 16 font Large Numbers <code>&lt;res/qw_fnt_largenum.h&gt;</code> <code>QW_FONT_LARGENUM</code> Numbers only <p>For each font, the font variables are objects with the following attributes:</p> Attribute Value <code>width</code> The font width in pixels <code>height</code> The font height in pixels <code>start</code> The font start character offset <code>n_chars</code> The number of characters <code>map_width</code> The width of the font map <p>Example use of a font object attribute: <pre><code>#include &lt;res/qw_fnt_31x48.h&gt;\n\nint myFontWidth = QW_FONT_31X48.width;\n</code></pre></p>"},{"location":"single_page/#getfont","title":"getFont()","text":"<p>This method returns the current font for the device.</p> <pre><code>QwiicFont * getFont(void)\n</code></pre> Parameter Type Description return value <code>QwiicFont*</code> A pointer to the current font. See <code>setFont()</code> for font object details."},{"location":"single_page/#getfontname","title":"getFontName()","text":"<p>This method returns the height in pixels of a provided String based on the current device font.</p> <pre><code>String getFontName(void)\n</code></pre> Parameter Type Description return value String The name of the current font."},{"location":"single_page/#getstringwidth","title":"getStringWidth()","text":"<p>This method returns the width in pixels of a provided String based on the current device font.</p> <pre><code>unsigned int getStringWidth(String text)\n</code></pre> Parameter Type Description text <code>String</code> The string used to determine width return value <code>unsigned int</code> The width of the provide string, as determined using the current font."},{"location":"single_page/#getstringheight","title":"getStringHeight()","text":"<p>This method returns the height in pixels of a provided String based on the current device font.</p> <pre><code>unsigned int getStringHeight(String text)\n</code></pre> Parameter Type Description text <code>String</code> The string used to determine height return value <code>unsigned int</code> The height of the provide string, as determined using the current font."},{"location":"single_page/#setdrawmode","title":"setDrawMode()","text":"<p>This method sets the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. </p> <pre><code>void setDrawMode(grRasterOp_t rop)\n</code></pre> Parameter Type Description rop <code>grRasterOp_t</code> The raster operation (ROP) to set the graphics system to. <p>Raster operations device how source (pixels to draw) are represented on the destination device. The available Raster Operation (ROP) codes are:</p> ROP Code Description grROPCopy default Drawn pixel values are copied to the device screen grROPNotCopy A not operation is applied to the source value before copying to screen grROPNot A not operation is applied to the destination (screen) value grROPXOR A XOR operation is performed between the source and destination values grROPBlack A value of 0, or black is drawn to the destination grROPWhite A value of 1, or black is drawn to the destination"},{"location":"single_page/#getdrawmode","title":"getDrawMode()","text":"<p>This method returns the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. </p> <pre><code>grRasterOp_t getDrawMode(void)\n</code></pre> Parameter Type Description return value <code>grRasterOp_t</code> The current aster operation (ROP) of the graphics system."},{"location":"single_page/#graphics","title":"Graphics","text":""},{"location":"single_page/#graphics-methods","title":"Graphics Methods","text":"<p>Methods used to draw and display graphics.</p>"},{"location":"single_page/#display","title":"display()","text":"<p>When called, any pending display updates are sent to the connected OLED device. This includes drawn graphics and erase commands.</p> <pre><code>void display(void)\n</code></pre> Parameter Type Description NONE"},{"location":"single_page/#erase","title":"erase()","text":"<p>Erases all graphics on the device, placing the display in a blank state. The erase update isn't sent to the device until the next <code>display()</code> call on the device.</p> <pre><code>void erase(void)\n</code></pre> Parameter Type Description NONE"},{"location":"single_page/#pixel","title":"pixel()","text":"<p>Set the value of a pixel on the screen.</p> <pre><code>void pixel(uint8_t x, uint8_t y, uint8_t clr)\n</code></pre> Parameter Type Description x <code>uint8_t</code> The X coordinate of the pixel to set y <code>uint8_t</code> The Y coordinate of the pixel to set clr <code>uint8_t</code> optional The color value to set the pixel. This defaults to white (1)."},{"location":"single_page/#line","title":"line()","text":"<p>Draw a line on the screen. </p> <p>Note: If a line is horizontal (y0 = y1) or vertical (x0 = x1), optimized draw algorithms are used by the library.</p> <pre><code>void line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The start X coordinate of the line y0 <code>uint8_t</code> The start Y coordinate of the line x1 <code>uint8_t</code> The end X coordinate of the line y1 <code>uint8_t</code> The end Y coordinate of the line clr <code>uint8_t</code> optional The color value to draw the line. This defaults to white (1)."},{"location":"single_page/#rectangle","title":"rectangle()","text":"<p>Draw a rectangle on the screen. </p> <pre><code>void rectangle(uint8_t x0, uint8_t y0, uint8_t width, uint8_t height, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The start X coordinate of the rectangle - upper left corner y0 <code>uint8_t</code> The start Y coordinate of the rectangle - upper left corner width <code>uint8_t</code> The width of the rectangle height <code>uint8_t</code> The height of the rectangle clr <code>uint8_t</code> optional The color value to draw the line. This defaults to white (1)."},{"location":"single_page/#rectanglefill","title":"rectangleFill()","text":"<p>Draw a filled rectangle on the screen. </p> <pre><code>void rectangleFill(uint8_t x0, uint8_t y0, uint8_t width, uint8_t height, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The start X coordinate of the rectangle - upper left corner y0 <code>uint8_t</code> The start Y coordinate of the rectangle - upper left corner width <code>uint8_t</code> The width of the rectangle height <code>uint8_t</code> The height of the rectangle clr <code>uint8_t</code> optional The color value to draw the line. This defaults to white (1)."},{"location":"single_page/#circle","title":"circle()","text":"<p>Draw a circle on the screen. </p> <pre><code>void circle(uint8_t x0, uint8_t y0, uint8_t radius, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate of the circle center y0 <code>uint8_t</code> The Y coordinate of the circle center radius <code>uint8_t</code> The radius of the circle clr <code>uint8_t</code> optional The color value to draw the circle. This defaults to white (1)."},{"location":"single_page/#circlefill","title":"circleFill()","text":"<p>Draw a filled circle on the screen. </p> <pre><code>void circleFill(uint8_t x0, uint8_t y0, uint8_t radius, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate of the circle center y0 <code>uint8_t</code> The Y coordinate of the circle center radius <code>uint8_t</code> The radius of the circle clr <code>uint8_t</code> optional The color value to draw the circle. This defaults to white (1)."},{"location":"single_page/#bitmap","title":"bitmap()","text":"<p>Draws a bitmap on the screen.</p> <p>The bitmap should be 8 bit encoded - each pixel contains 8 y values.</p> <pre><code>void bitmap(uint8_t x0, uint8_t y0, uint8_t *pBitmap, uint8_t bmp_width, uint8_t bmp_height )\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to place the bitmap - upper left corner y0 <code>uint8_t</code> The Y coordinate to place the bitmap - upper left corner pBitmap <code>uint8_t *</code> A pointer to the bitmap array bmp_width <code>uint8_t</code> The width of the bitmap bmp_height <code>uint8_t</code> The height of the bitmap"},{"location":"single_page/#bitmap_1","title":"bitmap()","text":"<p>Draws a bitmap on the screen.</p> <p>The bitmap should be 8 bit encoded - each pixel contains 8 y values.</p> <p>The coordinate [x1,y1] allows for only a portion of bitmap to be drawn. </p> <pre><code>void bitmap(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, \n                uint8_t *pBitmap, uint8_t bmp_width, uint8_t bmp_height )\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to place the bitmap - upper left corner y0 <code>uint8_t</code> The Y coordinate to place the bitmap - upper left corner x1 <code>uint8_t</code> The end X coordinate of the bitmap - lower right corner y1 <code>uint8_t</code> The end Y coordinate of the bitmap - lower right corner pBitmap <code>uint8_t *</code> A pointer to the bitmap array bmp_width <code>uint8_t</code> The width of the bitmap bmp_height <code>uint8_t</code> The height of the bitmap"},{"location":"single_page/#bitmap_2","title":"bitmap()","text":"<p>Draws a bitmap on the screen using a Bitmap object for the bitmap data.</p> <pre><code>void bitmap(uint8_t x0, uint8_t y0, QwiicBitmap&amp; bitmap)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to place the bitmap - upper left corner y0 <code>uint8_t</code> The Y coordinate to place the bitmap - upper left corner Bitmap <code>QwiicBitmap</code> A bitmap object"},{"location":"single_page/#text","title":"text()","text":"<p>Draws a string using the current font on the screen.</p> <pre><code>void text(uint8_t x0, uint8_t y0, const char * text, uint8_t clr)\n</code></pre> Parameter Type Description x0 <code>uint8_t</code> The X coordinate to start drawing the text y0 <code>uint8_t</code> The Y coordinate to start drawing the text text <code>const char*</code> The string to draw on the screen text <code>String</code> The Arduino string to draw on the screen clr <code>uint8_t</code> optional The color value to draw the circle. This defaults to white (1)."},{"location":"single_page/#arduino-print","title":"Arduino Print","text":""},{"location":"single_page/#arduino-print_1","title":"Arduino Print","text":"<p>Methods used to support Arduino Print functionality.</p>"},{"location":"single_page/#setcursor","title":"setCursor()","text":"<p>This method is called set the \"cursor\" position in the device. The library supports the Arduino <code>Print</code> interface, enabling the use of a <code>print()</code> and <code>println()</code> methods. The set cursor position defines where to start text output for this functionality.</p> <pre><code>void setCursor(uint8_t x, uint8_t y)\n</code></pre> Parameter Type Description x <code>uint8_t</code> The X coordinate of the cursor y <code>uint8_t</code> The Y coordinate of the cursor"},{"location":"single_page/#setcolor","title":"setColor()","text":"<p>This method is called to set the current color of the system. This is used by the Arduino <code>Print</code> interface functionality</p> <pre><code>void setColor(uint8_t clr)\n</code></pre> Parameter Type Description <code>clr</code> <code>uint8_t</code> The color to set. 0 = black, &gt; 0 = white"},{"location":"single_page/#getcolor","title":"getColor()","text":"<p>This method is called to get the current color of the system. This is used by the Arduino <code>Print</code> interface functionality</p> <pre><code>uint8_t getColor(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The current color"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":""},{"location":"single_page/#example-1-hello","title":"Example 1 - Hello","text":"<p>--8&lt;-- \"./docs/ex_01_hello.md</p>"},{"location":"single_page/#example-2-shapes","title":"Example 2 - Shapes","text":"<p>--8&lt;-- \"./docs/ex_02_lines.md</p>"},{"location":"single_page/#example-3-bitmaps","title":"Example 3 - Bitmaps","text":"<p>--8&lt;-- \"./docs/ex_03_bitmaps.md</p>"},{"location":"single_page/#example-4-text","title":"Example 4 - Text","text":"<p>--8&lt;-- \"./docs/ex_04_text.md</p>"},{"location":"single_page/#other-examples","title":"Other Examples","text":"<p>--8&lt;-- \"./docs/ex_other.md</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"software/","title":"Software Setup","text":""},{"location":"software/#installation","title":"Installation","text":"<p>Arduino</p> <p>This guide assumes you are using the latest version of the Arduino IDE on your desktop. The following resources available at SparkFun provide the details on setting up and configuring Arduino to use this library.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>The SparkFun Qwiic OLED Arduino Library is available within in the Arduino library manager, which is launched via the Sketch &gt; Include Libraries &gt; Manage Libraries \u2026 menu option in the Arduino IDE. Just search for SparkFun Qwiic OLED Library.</p> <p>Note</p> <p>If you've never connected a USB-to-serial converter to your computer before, you may need to install drivers. The drivers will depend on what is populated on your Arduino development board. Check out the following tutorials for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> <li>How to Install FTDI Drivers</li> <li>How to Install CP2104 Drivers</li> </ul>"},{"location":"software/#general-use-pattern","title":"General Use Pattern","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library.</p> <pre><code>// Include the SparkFun qwiic OLED Library\n#include &lt;SparkFun_Qwiic_OLED.h&gt;\n</code></pre> <p>The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions.</p> <p>The user selects from one of the following classes:</p> Class Qwiic OLED Device <code>QwiicMicroOLED</code> SparkFun Qwiic Micro OLED  <code>QwiicNarrowOLED</code> SparkFun Qwiic OLED Display (128x32)  <code>QwiicTransparentOLED</code> SparkFun Transparent Graphical OLED <code>Qwiic1in3OLED</code> SparkFun Qwiic OLED 1.3\" Display (128x32)  <p>For this example, the Qwiic Micro OLED is used.</p> <pre><code>QwiicMicroOLED myOLED;\n</code></pre> <p>In the <code>setup()</code> function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the <code>begin()</code> method. This method returns a value of <code>true</code> on success, or <code>false</code> on failure.</p> <pre><code>int width, height;  // global variables for use in the sketch\nvoid setup()\n{\n    Serial.begin(115200);\n    if(!myOLED.begin()){\n        Serial.println(\"Device failed to initialize\");\n        while(1);  // halt execution\n    }\n    Serial.println(\"Device is initialized\");\n\n}\n</code></pre> <p>Now that the library is initialized, the desired graphics are drawn. Here we erase the screen and draw simple series of lines that originate at the screen origin and fan out across the height of the display.</p> <p>Note</p> <p>Graphics are not send to the OLED device when drawn. Updates are only sent to the device when the <code>display()</code> method is called. This minimizes data transfers to the OLED device, delivering a responsive display response.</p> <pre><code>    myOLED.erase();           // Erase the screen\n    myOLED.display();         // Send erase to device\n\n    delay(1000);    // Slight pause\n\n    // Draw our lines from point (0,0) to (i, screen height)\n\n    for(int i=0; i &lt; width; i+= 6){\n        myOLED.line(0, 0, i, height-1);    // draw the line\n        myOLED.display();                  // Send the new line to the device for display\n    }\n</code></pre>"},{"location":"software/#library-provided-examples","title":"Library Provided Examples","text":"<p>The SparkFun Qwiic OLED Arduino Library, includes a wide variety of examples. These are available from the Examples menu of the Arduino IDE, and in the <code>examples</code>folder of this repository.</p> <p>For a detailed description of the examples, see the Examples section of the documentation.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Qwiic OLED Arduino Library repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li> <p>Our board design files are contained in the <code>Hardware</code> folder of their respective repositories:</p> </li> <li> <p>SparkFun Micro OLED Breakout (Qwiic)</p> </li> <li>SparkFun Qwiic OLED Display (0.91 in, 128x32)</li> <li>SparkFun Transparent Graphical OLED Breakout (Qwiic)</li> <li>SparkFun Qwiic OLED - (1.3in., 128x64)</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Qwiic OLED Arduino Library repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <p>Our board design files are contained in the <code>Hardware</code> folder of their respective repositories:</p> <ul> <li>SparkFun Micro OLED Breakout (Qwiic)</li> <li>SparkFun Qwiic OLED Display (0.91 in, 128x32)</li> <li>SparkFun Transparent Graphical OLED Breakout (Qwiic)</li> <li>SparkFun Qwiic OLED - (1.3in., 128x64)</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/","title":"Example 1 - Hello","text":"<p>A simple example to show the basic setup and use of the SparkFun Qwiic OLED Library.</p> <p>Key Demo Features</p> <ul> <li>Declaring a Qwiic OLED device object.</li> <li>Initializing the Qwiic OLED device</li> <li>Drawing a simple graphic - a filled rectangle and a text string</li> <li>Using the current font to center text on the screen.</li> <li>Displaying the graphics on the screen</li> </ul>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#setup","title":"Setup","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library.</p> <pre><code>// Include the SparkFun Qwiic OLED Library\n#include &lt;SparkFun_Qwiic_OLED.h&gt;\n</code></pre> <p>The next step is to declare the object for the SparkFun Qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions.</p> <p>The user selects from one of the following classes:</p> Class              Qwiic OLED Device              <code>QwiicMicroOLED</code> SparkFun Qwiic Micro OLED <code>QwiicTransparentOLED</code> SparkFun Transparent Graphical OLED <code>QwiicNarrowOLED</code> SparkFun Qwiic OLED Display (128x32) <code>Qwiic1in3OLED</code> SparkFun Qwiic OLED 1.3\" Display (128x32) <p>The example code supports all of the SparkFun Qwiic OLED boards. By default, the Qwiic Micro OLED is selected. To select a different board being used, add a single line comment (i.e. <code>//</code>) in front of \"<code>QwiicMicroOLED myOLED;</code>\" and uncomment the device being used for the demo board.</p> <pre><code>QwiicMicroOLED myOLED;\n//QwiicTransparentOLED myOLED;\n//QwiicNarrowOLED myOLED;\n//Qwiic1in3OLED myOLED;\n</code></pre> <p>Note</p> <p>As of version 1.0.2+, users will need to use the class as explained above instead of using a <code>#define</code>.</p> <pre><code>#define MICRO\n//#define NARROW\n//#define TRANSPARENT\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#initialization","title":"Initialization","text":"<p>In the <code>setup()</code> function of this sketch, like all of the SparkFun Qwiic Arduino libraries, the device is initialized by calling the <code>begin()</code> method. This method returns a value of <code>true</code> on success, or <code>false</code> on failure.</p> <pre><code>void setup()\n{\n\n    delay(500);   //Give display time to power on\n\n    // Serial on!\n    Serial.begin(115200);\n\n    Serial.println(\"\\n\\r-----------------------------------\");\n\n    Serial.print(\"Running Example 01 on: \");\n    Serial.println(String(deviceName));\n\n    // Initalize the OLED device and related graphics system\n    if(!myOLED.begin()){\n\n        Serial.println(\" - Device Begin Failed\");\n        while(1);\n    }\n\n    Serial.println(\"- Begin Success\");\n\n   // Do a simple test - fill a rectangle on the screen and then print hello!...\n\n}\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#drawing-graphics","title":"Drawing Graphics","text":"<p>Once the device is enabled, the rest of the <code>setup()</code> function is devoted to drawing a simple graphic on the target device.</p>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#filled-rectangle","title":"Filled Rectangle","text":"<p>First, draw a filled rectangle on the screen - leave a 4 pixel boarder at the end of the screen. Note that the <code>getWidth()</code> and <code>getHeight()</code> method are used to get the devices screen size.</p> <pre><code>    // Fill a rectangle on the screen that has a 4 pixel board\n    myOLED.rectangleFill(4, 4, myOLED.getWidth() - 8, myOLED.getHeight() - 8);\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#centered-text","title":"Centered Text","text":"<p>The next part of our graphic is a message centered in the drawn rectangle. To do the centering, the current font is accessed from the device, and the size of a character in the font is used to calculate the text position on the screen. Once the position is determined, the message is drawn on the display in black (0 for a color value).</p> <pre><code>    String hello = \"hello\"; // our message\n\n    // Center our message on the screen. Get the screen size of the \"hello\" string,\n    // calling the getStringWidth() and getStringHeight() methods on the oled\n\n    // starting x position - screen width minus string width  / 2\n    int x0 = (myOLED.getWidth() - myOLED.getStringWidth(hello)) / 2;\n\n    // starting y position - screen height minus string height / 2\n    int y0 = (myOLED.getHeight() - myOLED.getStringHeight(hello)) / 2;\n\n    // Draw the text - color of black (0)\n    myOLED.text(x0, y0, hello, 0);\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#displaying-the-graphics","title":"Displaying the Graphics","text":"<p>The last step is sending the graphics to the device. This is accomplished by calling the <code>display()</code> method.</p> <pre><code>    // There's nothing on the screen yet - Now send the graphics to the device\n    myOLED.display();\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#what-you-should-see","title":"What You Should See","text":"<p>And that's it! Select the board and COM port for your development board. Then upload the code! The graphic should display on the OLED device.</p> <p></p>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/","title":"Example 2 - Shapes","text":"<p>An example that shows drawing simple shapes using the SparkFun Qwiic OLED Library.</p> <p>Key Demo Features</p> <ul> <li>Drawing lines, rectangles and circles</li> <li>Demonstrating how graphics size impacts display speed</li> <li>Drawing and erasing graphics quickly</li> <li>XOR operations using raster operators</li> </ul>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#setup","title":"Setup","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library.</p> <pre><code>// Include the SparkFun Qwiic OLED Library\n#include &lt;SparkFun_Qwiic_OLED.h&gt;\n</code></pre> <p>The next step is to declare the object for the SparkFun Qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions.</p> <p>The user selects from one of the following classes:</p> Class              Qwiic OLED Device              <code>QwiicMicroOLED</code> SparkFun Qwiic Micro OLED <code>QwiicTransparentOLED</code> SparkFun Transparent Graphical OLED <code>QwiicNarrowOLED</code> SparkFun Qwiic OLED Display (128x32) <code>Qwiic1in3OLED</code> SparkFun Qwiic OLED 1.3\" Display (128x32) <p>The example code supports all of the SparkFun Qwiic OLED boards. By default, the Qwiic Micro OLED is selected. To select a different board being used, add a single line comment (i.e. <code>//</code>) in front of \"<code>QwiicMicroOLED myOLED;</code>\" and uncomment the device being used for the demo board.</p> <pre><code>QwiicMicroOLED myOLED;\n//QwiicTransparentOLED myOLED;\n//QwiicNarrowOLED myOLED;\n//Qwiic1in3OLED myOLED;\n</code></pre> <p>Note</p> <p>As of version 1.0.2+, users will need to use the class as explained above instead of using a <code>#define</code>.</p> <pre><code>#define MICRO\n//#define NARROW\n//#define TRANSPARENT\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#drawing-shapes","title":"Drawing Shapes","text":"<p>Note</p> <p>As of version 1.0.2+, the modular functions have a slightly different name. Some functions defined in the example code will have the <code>_</code> removed or words spelled out. For example, version v1.0.1 and below defined the function to test the line as <code>line_test_1()</code> while version v1.0.2+ defined the function as <code>lineTest1()</code>.</p> <p>The shapes drawn are broken into a set of functions that perform one test, which is part of the overall example.</p>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#lines","title":"Lines","text":"<p>This test starts with a short, horizontal line that is animated from the top to bottom of the display. After each iteration, the line size is increased and the animating sequence repeated.</p> <p>To animate the line, the display is erased, then the line drawn. Once the line is draw, the updated graphics is sent to the OLED device by calling the <code>display()</code> method.</p> <p>Note</p> <p>When <code>display()</code> is called, only the range of modified pixels is sent to the OLED device, greatly reducing the data transferred for small graphic changes.</p> <p>This is demonstrated by this test. When small lines are drawn, the update rate is fast, but as the line length increases, the update rate of the device is noticeably slower. A longer line requires more data to be sent to the device.</p> <pre><code>void lineTest1(void)\n{\n    int x, y, i;\n\n    int mid = width / 2;\n    int delta = mid / 8;\n\n    for (int j = 1; j &lt; 8; j++)\n    {\n\n        x = delta * j;\n\n        for (i = 0; i &lt; height * 2; i++)\n        {\n\n            y = i % height;\n            myOLED.erase();\n            myOLED.line(mid - x, y, mid + x, y);\n            myOLED.display();\n        }\n    }\n}\n</code></pre> <p>This test is followed up with a series of lines that span from a single point to the bottom of the screen, showing the flexibility of the line to raster algorithm used by the library.</p> <pre><code>void lineTest2(void)\n{\n    for (int i = 0; i &lt; width; i += 6)\n    {\n        myOLED.line(0, 0, i, height - 1);\n        myOLED.display();\n    }\n    delay(200);\n    myOLED.erase();\n    for (int i = width - 1; i &gt;= 0; i -= 6)\n    {\n        myOLED.line(width - 1, 0, i, height - 1);\n        myOLED.display();\n    }\n}\n</code></pre> <p>And the last line test draws a series of lines to test all three internal line drawing algorithms. Specifically:</p> <ul> <li>Angled lines drawn by the general purpose line algorithm</li> <li>Vertical lines drawn by an optimized line routine</li> <li>Horizontal lines draw by an optimized line routine</li> </ul> <p>The test animates to show a growing box, giving an idea of the speed and flexibility of the system.</p> <pre><code>void lineTestVerticalIterative(uint8_t y0, uint8_t y1)\n{\n    for (int i = 0; i &lt; width; i += 8)\n        myOLED.line(i, y0, i, y1);\n\n    // end off the vertical lines\n    myOLED.line(width - 1, y0, width - 1, y1);\n\n    // End lines and cross lines\n    myOLED.line(0, y0, width - 1, y0);\n    myOLED.line(0, y1, width - 1, y1);\n    myOLED.line(0, y0, width - 1, y1);\n    myOLED.line(0, y1, width - 1, y0);\n}\n\n// Entry point for test\nvoid lineTestVertical(void)\n{\n    int mid = height / 2;\n\n    for (int i = 0; i &lt; height; i += 4)\n    {\n\n        myOLED.erase();\n        lineTestVerticalIterative(mid - i / 2, mid + i / 2);\n        myOLED.display();\n        delay(10);\n    }\n}\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#rectangles","title":"Rectangles","text":"<p>Several rectangle routines are shown in this example. A key test is a fast drawing routine which animates a small rectangle being drawn diagonally across the screen.</p> <p>In this test, the rectangle is drawn, sent to the device via using <code>display()</code>, then the rectangle is drawn again, but this time in black. This effectively erases the rectangle. The position is incremented and the process loops, causing the rectangle to appear to fly across the screen.</p> <p>The animation is quick, since only the portions of the screen that need updated are actually updated.</p> <p>The animation algorithm is listed in the `rectangleTestMove() function.</p> <pre><code>void rectangleTestMove(void)\n{\n    float steps = height;\n    float xinc = width / steps;\n    float yinc = height / steps;\n    int side = 10;\n    float x = 0;\n    float y = 0;\n\n    for (int i = 0; i &lt; steps; i++)\n    {\n        // Draw the rectangle and send it to device\n        myOLED.rectangle(x, y, side, side);\n        myOLED.display(); // sends erased rect and new rect pixels to device\n\n        // Erase the that rect, increment and loop\n        myOLED.rectangle(x, y, side, side, 0);\n\n        x += xinc;\n        y += yinc;\n    }\n}\n</code></pre> <p>The next rectangle test draws a series of filled rectangles on the screen. The unique aspect of this test is that is uses the XOR functionally to overlay a rectangle on the device, presenting a alternating color pattern.</p> <p>The XOR raster operation is set by calling the <code>setDrawMode()</code> method on the OLED device, and providing the <code>grROPXOR</code> code. This switch the device into a XOR drawing mode. Graphic operations are restored to normal by calling <code>setDrawMode()</code> and providing the <code>grROPCopy</code> code, which copies the new pixel value to the destination.</p> <p>Filled rectangles and XOR operations:</p> <pre><code>void rectangleFillTest(void)\n{\n    myOLED.rectangleFill(4, 4, width / 2 - 8, height - 8);\n\n    myOLED.rectangleFill(width / 2 + 4, 4, width / 2 - 8, height - 8);\n\n    myOLED.setDrawMode(grROPXOR); // xor\n    myOLED.rectangleFill(width / 4, 8, width / 2, height - 16);\n    myOLED.setDrawMode(grROPCopy); // back to copy op (default)\n}\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#circles","title":"Circles","text":"<p>The final shape drawn by this example is a series of circles and filled circles. Using the geometry of the screen, a set of circles are drawn and displayed.</p> <pre><code>void circleTest(void)\n{\n    // Let's draw some circles that fit on the device\n    myOLED.circle(width / 4, height / 2, height / 3);\n\n    myOLED.circleFill(width - width / 4, height / 2, height / 3);\n\n    myOLED.circle(4, height / 2, height / 3);\n\n    myOLED.circleFill(width - width / 2, height / 2, height / 4);\n}\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/","title":"Example 3 - Bitmaps","text":"<p>An example that shows drawing bitmaps using the  SparkFun Qwiic OLED Library.</p> <p>Key Demo Features</p> <ul> <li>Understanding bitmap structure</li> <li>Bitmap objects</li> <li>Drawing Bitmap</li> </ul>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#setup","title":"Setup","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. <pre><code>// Include the SparkFun qwiic OLED Library\n#include &lt;SparkFun_Qwiic_OLED.h&gt;\n</code></pre> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions. </p> <p>The user selects from one of the following classes:</p> Class Qwiic OLED Device <code>QwiicMicroOLED</code> SparkFun Qwiic Micro OLED  <code>QwiicNarrowOLED</code> SparkFun Qwiic OLED Display (128x32)  <code>QwiicTransparentOLED</code> SparkFun Transparent Graphical OLED <code>Qwiic1in3OLED</code> SparkFun Qwiic OLED 1.3\" Display (128x32)  <p>The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the <code>#define</code> for the demo board. </p> <p>For this example, the Qwiic Micro OLED is used.</p> <p><pre><code>#define MICRO\n//#define NARROW\n//#define TRANSPARENT\n</code></pre> Which results in myOLED being declared as:</p> <pre><code>QwiicMicroOLED myOLED;\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#initialization","title":"Initialization","text":"<p>In the <code>setup()</code> function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the <code>begin()</code> method. This method returns a value of <code>true</code> on success, or <code>false</code> on failure. </p> <pre><code>void setup()\n{\n\n    delay(500);   //Give display time to power on\n\n    // Serial on!\n    Serial.begin(115200);\n\n    Serial.println(\"\\n\\r-----------------------------------\");\n\n    Serial.print(\"Running Example 01 on: \");\n    Serial.println(String(deviceName));\n\n    // Initalize the OLED device and related graphics system\n    if(!myOLED.begin()){\n\n        Serial.println(\" - Device Begin Failed\");\n        while(1);\n    }\n\n    Serial.println(\"- Begin Success\");\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#drawing-bitmaps","title":"Drawing Bitmaps","text":""},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/","title":"Example 4 - Text","text":"<p>An example that shows drawing bitmaps using the  SparkFun Qwiic OLED Library.</p> <p>Key Demo Features</p> <ul> <li>Understanding font structure and use</li> <li>Drawing text</li> <li>Using the Arduino <code>Print</code> functionality</li> </ul>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#setup","title":"Setup","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. <pre><code>// Include the SparkFun qwiic OLED Library\n#include &lt;SparkFun_Qwiic_OLED.h&gt;\n</code></pre> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions. </p> <p>The user selects from one of the following classes:</p> Class Qwiic OLED Device <code>QwiicMicroOLED</code> SparkFun Qwiic Micro OLED  <code>QwiicNarrowOLED</code> SparkFun Qwiic OLED Display (128x32)  <code>QwiicTransparentOLED</code> SparkFun Transparent Graphical OLED <code>Qwiic1in3OLED</code> SparkFun Qwiic OLED 1.3\" Display (128x32)  <p>The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the <code>#define</code> for the demo board. </p> <p>For this example, the Qwiic Micro OLED is used.</p> <p><pre><code>#define MICRO\n//#define NARROW\n//#define TRANSPARENT\n</code></pre> Which results in myOLED being declared as:</p> <pre><code>QwiicMicroOLED myOLED;\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#initialization","title":"Initialization","text":"<p>In the <code>setup()</code> function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the <code>begin()</code> method. This method returns a value of <code>true</code> on success, or <code>false</code> on failure. </p> <pre><code>void setup()\n{\n\n    delay(500);   //Give display time to power on\n\n    // Serial on!\n    Serial.begin(115200);\n\n    Serial.println(\"\\n\\r-----------------------------------\");\n\n    Serial.print(\"Running Example 01 on: \");\n    Serial.println(String(deviceName));\n\n    // Initalize the OLED device and related graphics system\n    if(!myOLED.begin()){\n\n        Serial.println(\" - Device Begin Failed\");\n        while(1);\n    }\n\n    Serial.println(\"- Begin Success\");\n</code></pre>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#drawing-text","title":"Drawing Text","text":""},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/","title":"Other Examples","text":"<p>Descriptions of the other demos that are provided as part of the SparkFun Qwiic OLED Library.</p>"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#scroll-flip","title":"Scroll-Flip","text":""},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#clock","title":"Clock","text":""},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#cube","title":"Cube","text":""},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#multi","title":"Multi","text":""}]}